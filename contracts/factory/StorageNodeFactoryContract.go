// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package StorageNodeFactoryContract

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// StorageNodeFactoryContractMetaData contains all meta data concerning the StorageNodeFactoryContract contract.
var StorageNodeFactoryContractMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"TLSCert\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"host\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"EvNewStorageContract\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_TLSCert\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"_host\",\"type\":\"string\"}],\"name\":\"createStorageContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStorageContracts\",\"outputs\":[{\"internalType\":\"contractStorageNode[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"storageContracts\",\"outputs\":[{\"internalType\":\"contractStorageNode\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "",
}

// StorageNodeFactoryContractABI is the input ABI used to generate the binding from.
// Deprecated: Use StorageNodeFactoryContractMetaData.ABI instead.
var StorageNodeFactoryContractABI = StorageNodeFactoryContractMetaData.ABI

// StorageNodeFactoryContractBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StorageNodeFactoryContractMetaData.Bin instead.
var StorageNodeFactoryContractBin = StorageNodeFactoryContractMetaData.Bin

// DeployStorageNodeFactoryContract deploys a new Ethereum contract, binding an instance of StorageNodeFactoryContract to it.
func DeployStorageNodeFactoryContract(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *StorageNodeFactoryContract, error) {
	parsed, err := StorageNodeFactoryContractMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(StorageNodeFactoryContractBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &StorageNodeFactoryContract{StorageNodeFactoryContractCaller: StorageNodeFactoryContractCaller{contract: contract}, StorageNodeFactoryContractTransactor: StorageNodeFactoryContractTransactor{contract: contract}, StorageNodeFactoryContractFilterer: StorageNodeFactoryContractFilterer{contract: contract}}, nil
}

// StorageNodeFactoryContract is an auto generated Go binding around an Ethereum contract.
type StorageNodeFactoryContract struct {
	StorageNodeFactoryContractCaller     // Read-only binding to the contract
	StorageNodeFactoryContractTransactor // Write-only binding to the contract
	StorageNodeFactoryContractFilterer   // Log filterer for contract events
}

// StorageNodeFactoryContractCaller is an auto generated read-only Go binding around an Ethereum contract.
type StorageNodeFactoryContractCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StorageNodeFactoryContractTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StorageNodeFactoryContractTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StorageNodeFactoryContractFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StorageNodeFactoryContractFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StorageNodeFactoryContractSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StorageNodeFactoryContractSession struct {
	Contract     *StorageNodeFactoryContract // Generic contract binding to set the session for
	CallOpts     bind.CallOpts               // Call options to use throughout this session
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// StorageNodeFactoryContractCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StorageNodeFactoryContractCallerSession struct {
	Contract *StorageNodeFactoryContractCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                     // Call options to use throughout this session
}

// StorageNodeFactoryContractTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StorageNodeFactoryContractTransactorSession struct {
	Contract     *StorageNodeFactoryContractTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                     // Transaction auth options to use throughout this session
}

// StorageNodeFactoryContractRaw is an auto generated low-level Go binding around an Ethereum contract.
type StorageNodeFactoryContractRaw struct {
	Contract *StorageNodeFactoryContract // Generic contract binding to access the raw methods on
}

// StorageNodeFactoryContractCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StorageNodeFactoryContractCallerRaw struct {
	Contract *StorageNodeFactoryContractCaller // Generic read-only contract binding to access the raw methods on
}

// StorageNodeFactoryContractTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StorageNodeFactoryContractTransactorRaw struct {
	Contract *StorageNodeFactoryContractTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStorageNodeFactoryContract creates a new instance of StorageNodeFactoryContract, bound to a specific deployed contract.
func NewStorageNodeFactoryContract(address common.Address, backend bind.ContractBackend) (*StorageNodeFactoryContract, error) {
	contract, err := bindStorageNodeFactoryContract(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &StorageNodeFactoryContract{StorageNodeFactoryContractCaller: StorageNodeFactoryContractCaller{contract: contract}, StorageNodeFactoryContractTransactor: StorageNodeFactoryContractTransactor{contract: contract}, StorageNodeFactoryContractFilterer: StorageNodeFactoryContractFilterer{contract: contract}}, nil
}

// NewStorageNodeFactoryContractCaller creates a new read-only instance of StorageNodeFactoryContract, bound to a specific deployed contract.
func NewStorageNodeFactoryContractCaller(address common.Address, caller bind.ContractCaller) (*StorageNodeFactoryContractCaller, error) {
	contract, err := bindStorageNodeFactoryContract(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StorageNodeFactoryContractCaller{contract: contract}, nil
}

// NewStorageNodeFactoryContractTransactor creates a new write-only instance of StorageNodeFactoryContract, bound to a specific deployed contract.
func NewStorageNodeFactoryContractTransactor(address common.Address, transactor bind.ContractTransactor) (*StorageNodeFactoryContractTransactor, error) {
	contract, err := bindStorageNodeFactoryContract(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StorageNodeFactoryContractTransactor{contract: contract}, nil
}

// NewStorageNodeFactoryContractFilterer creates a new log filterer instance of StorageNodeFactoryContract, bound to a specific deployed contract.
func NewStorageNodeFactoryContractFilterer(address common.Address, filterer bind.ContractFilterer) (*StorageNodeFactoryContractFilterer, error) {
	contract, err := bindStorageNodeFactoryContract(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StorageNodeFactoryContractFilterer{contract: contract}, nil
}

// bindStorageNodeFactoryContract binds a generic wrapper to an already deployed contract.
func bindStorageNodeFactoryContract(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StorageNodeFactoryContractABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StorageNodeFactoryContract *StorageNodeFactoryContractRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StorageNodeFactoryContract.Contract.StorageNodeFactoryContractCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StorageNodeFactoryContract *StorageNodeFactoryContractRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StorageNodeFactoryContract.Contract.StorageNodeFactoryContractTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StorageNodeFactoryContract *StorageNodeFactoryContractRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StorageNodeFactoryContract.Contract.StorageNodeFactoryContractTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StorageNodeFactoryContract *StorageNodeFactoryContractCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StorageNodeFactoryContract.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StorageNodeFactoryContract *StorageNodeFactoryContractTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StorageNodeFactoryContract.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StorageNodeFactoryContract *StorageNodeFactoryContractTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StorageNodeFactoryContract.Contract.contract.Transact(opts, method, params...)
}

// GetStorageContracts is a free data retrieval call binding the contract method 0xeb7f0d5e.
//
// Solidity: function getStorageContracts() view returns(address[])
func (_StorageNodeFactoryContract *StorageNodeFactoryContractCaller) GetStorageContracts(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _StorageNodeFactoryContract.contract.Call(opts, &out, "getStorageContracts")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetStorageContracts is a free data retrieval call binding the contract method 0xeb7f0d5e.
//
// Solidity: function getStorageContracts() view returns(address[])
func (_StorageNodeFactoryContract *StorageNodeFactoryContractSession) GetStorageContracts() ([]common.Address, error) {
	return _StorageNodeFactoryContract.Contract.GetStorageContracts(&_StorageNodeFactoryContract.CallOpts)
}

// GetStorageContracts is a free data retrieval call binding the contract method 0xeb7f0d5e.
//
// Solidity: function getStorageContracts() view returns(address[])
func (_StorageNodeFactoryContract *StorageNodeFactoryContractCallerSession) GetStorageContracts() ([]common.Address, error) {
	return _StorageNodeFactoryContract.Contract.GetStorageContracts(&_StorageNodeFactoryContract.CallOpts)
}

// StorageContracts is a free data retrieval call binding the contract method 0xa9ad5825.
//
// Solidity: function storageContracts(uint256 ) view returns(address)
func (_StorageNodeFactoryContract *StorageNodeFactoryContractCaller) StorageContracts(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _StorageNodeFactoryContract.contract.Call(opts, &out, "storageContracts", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StorageContracts is a free data retrieval call binding the contract method 0xa9ad5825.
//
// Solidity: function storageContracts(uint256 ) view returns(address)
func (_StorageNodeFactoryContract *StorageNodeFactoryContractSession) StorageContracts(arg0 *big.Int) (common.Address, error) {
	return _StorageNodeFactoryContract.Contract.StorageContracts(&_StorageNodeFactoryContract.CallOpts, arg0)
}

// StorageContracts is a free data retrieval call binding the contract method 0xa9ad5825.
//
// Solidity: function storageContracts(uint256 ) view returns(address)
func (_StorageNodeFactoryContract *StorageNodeFactoryContractCallerSession) StorageContracts(arg0 *big.Int) (common.Address, error) {
	return _StorageNodeFactoryContract.Contract.StorageContracts(&_StorageNodeFactoryContract.CallOpts, arg0)
}

// CreateStorageContract is a paid mutator transaction binding the contract method 0xf3d09aff.
//
// Solidity: function createStorageContract(bytes _TLSCert, string _host) returns(address)
func (_StorageNodeFactoryContract *StorageNodeFactoryContractTransactor) CreateStorageContract(opts *bind.TransactOpts, _TLSCert []byte, _host string) (*types.Transaction, error) {
	return _StorageNodeFactoryContract.contract.Transact(opts, "createStorageContract", _TLSCert, _host)
}

// CreateStorageContract is a paid mutator transaction binding the contract method 0xf3d09aff.
//
// Solidity: function createStorageContract(bytes _TLSCert, string _host) returns(address)
func (_StorageNodeFactoryContract *StorageNodeFactoryContractSession) CreateStorageContract(_TLSCert []byte, _host string) (*types.Transaction, error) {
	return _StorageNodeFactoryContract.Contract.CreateStorageContract(&_StorageNodeFactoryContract.TransactOpts, _TLSCert, _host)
}

// CreateStorageContract is a paid mutator transaction binding the contract method 0xf3d09aff.
//
// Solidity: function createStorageContract(bytes _TLSCert, string _host) returns(address)
func (_StorageNodeFactoryContract *StorageNodeFactoryContractTransactorSession) CreateStorageContract(_TLSCert []byte, _host string) (*types.Transaction, error) {
	return _StorageNodeFactoryContract.Contract.CreateStorageContract(&_StorageNodeFactoryContract.TransactOpts, _TLSCert, _host)
}

// RemoveContract is a paid mutator transaction binding the contract method 0xc375c2ef.
//
// Solidity: function removeContract(address addr) returns()
func (_StorageNodeFactoryContract *StorageNodeFactoryContractTransactor) RemoveContract(opts *bind.TransactOpts, addr common.Address) (*types.Transaction, error) {
	return _StorageNodeFactoryContract.contract.Transact(opts, "removeContract", addr)
}

// RemoveContract is a paid mutator transaction binding the contract method 0xc375c2ef.
//
// Solidity: function removeContract(address addr) returns()
func (_StorageNodeFactoryContract *StorageNodeFactoryContractSession) RemoveContract(addr common.Address) (*types.Transaction, error) {
	return _StorageNodeFactoryContract.Contract.RemoveContract(&_StorageNodeFactoryContract.TransactOpts, addr)
}

// RemoveContract is a paid mutator transaction binding the contract method 0xc375c2ef.
//
// Solidity: function removeContract(address addr) returns()
func (_StorageNodeFactoryContract *StorageNodeFactoryContractTransactorSession) RemoveContract(addr common.Address) (*types.Transaction, error) {
	return _StorageNodeFactoryContract.Contract.RemoveContract(&_StorageNodeFactoryContract.TransactOpts, addr)
}

// StorageNodeFactoryContractEvNewStorageContractIterator is returned from FilterEvNewStorageContract and is used to iterate over the raw logs and unpacked data for EvNewStorageContract events raised by the StorageNodeFactoryContract contract.
type StorageNodeFactoryContractEvNewStorageContractIterator struct {
	Event *StorageNodeFactoryContractEvNewStorageContract // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StorageNodeFactoryContractEvNewStorageContractIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StorageNodeFactoryContractEvNewStorageContract)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StorageNodeFactoryContractEvNewStorageContract)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StorageNodeFactoryContractEvNewStorageContractIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StorageNodeFactoryContractEvNewStorageContractIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StorageNodeFactoryContractEvNewStorageContract represents a EvNewStorageContract event raised by the StorageNodeFactoryContract contract.
type StorageNodeFactoryContractEvNewStorageContract struct {
	Addr    common.Address
	TLSCert []byte
	Host    string
	Owner   common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterEvNewStorageContract is a free log retrieval operation binding the contract event 0xb7735e0d2d480d06c7e16d11cfd7d534565a9315574f36c54d5585367cb37b92.
//
// Solidity: event EvNewStorageContract(address addr, bytes TLSCert, string host, address owner)
func (_StorageNodeFactoryContract *StorageNodeFactoryContractFilterer) FilterEvNewStorageContract(opts *bind.FilterOpts) (*StorageNodeFactoryContractEvNewStorageContractIterator, error) {

	logs, sub, err := _StorageNodeFactoryContract.contract.FilterLogs(opts, "EvNewStorageContract")
	if err != nil {
		return nil, err
	}
	return &StorageNodeFactoryContractEvNewStorageContractIterator{contract: _StorageNodeFactoryContract.contract, event: "EvNewStorageContract", logs: logs, sub: sub}, nil
}

// WatchEvNewStorageContract is a free log subscription operation binding the contract event 0xb7735e0d2d480d06c7e16d11cfd7d534565a9315574f36c54d5585367cb37b92.
//
// Solidity: event EvNewStorageContract(address addr, bytes TLSCert, string host, address owner)
func (_StorageNodeFactoryContract *StorageNodeFactoryContractFilterer) WatchEvNewStorageContract(opts *bind.WatchOpts, sink chan<- *StorageNodeFactoryContractEvNewStorageContract) (event.Subscription, error) {

	logs, sub, err := _StorageNodeFactoryContract.contract.WatchLogs(opts, "EvNewStorageContract")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StorageNodeFactoryContractEvNewStorageContract)
				if err := _StorageNodeFactoryContract.contract.UnpackLog(event, "EvNewStorageContract", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEvNewStorageContract is a log parse operation binding the contract event 0xb7735e0d2d480d06c7e16d11cfd7d534565a9315574f36c54d5585367cb37b92.
//
// Solidity: event EvNewStorageContract(address addr, bytes TLSCert, string host, address owner)
func (_StorageNodeFactoryContract *StorageNodeFactoryContractFilterer) ParseEvNewStorageContract(log types.Log) (*StorageNodeFactoryContractEvNewStorageContract, error) {
	event := new(StorageNodeFactoryContractEvNewStorageContract)
	if err := _StorageNodeFactoryContract.contract.UnpackLog(event, "EvNewStorageContract", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
