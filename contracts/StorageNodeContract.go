// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package StorageNodeContract

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// StorageNodeContractMetaData contains all meta data concerning the StorageNodeContract contract.
var StorageNodeContractMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_TLSCert\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"_HOST\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"fileMerkleRootHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiryTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"segmentIndex\",\"type\":\"uint32\"}],\"name\":\"EvProveStorage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"fileMerkleRootHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"EvValidationExpired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"fileMerkleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"segmentIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"EvValidationSubmitted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"HOST\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TLSCert\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRootHash\",\"type\":\"bytes32\"}],\"name\":\"computeKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enumStorageNode.CallerType\",\"name\":\"callerType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRootHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"fileSize\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"timerStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timerEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"proveTimeoutLength\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"concludeTimeoutLength\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"segmentsCount\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"bidAmount\",\"type\":\"uint256\"}],\"name\":\"concludeTransaction\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRootHash\",\"type\":\"bytes32\"}],\"name\":\"finishTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mappingLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mappingsList\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"rootHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"processValidation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"fileRootHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"segmentIndex\",\"type\":\"uint32\"}],\"name\":\"validateStorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"rootHash\",\"type\":\"bytes32\"}],\"name\":\"validationExpired\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "0x6080604052600060025560006003553480156200001b57600080fd5b506040516200370f3803806200370f8339818101604052810190620000419190620002b4565b816000908162000052919062000584565b508060019081620000649190620006db565b505050620007c2565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620000d6826200008b565b810181811067ffffffffffffffff82111715620000f857620000f76200009c565b5b80604052505050565b60006200010d6200006d565b90506200011b8282620000cb565b919050565b600067ffffffffffffffff8211156200013e576200013d6200009c565b5b62000149826200008b565b9050602081019050919050565b60005b838110156200017657808201518184015260208101905062000159565b60008484015250505050565b600062000199620001938462000120565b62000101565b905082815260208101848484011115620001b857620001b762000086565b5b620001c584828562000156565b509392505050565b600082601f830112620001e557620001e462000081565b5b8151620001f784826020860162000182565b91505092915050565b600067ffffffffffffffff8211156200021e576200021d6200009c565b5b62000229826200008b565b9050602081019050919050565b60006200024d620002478462000200565b62000101565b9050828152602081018484840111156200026c576200026b62000086565b5b6200027984828562000156565b509392505050565b600082601f83011262000299576200029862000081565b5b8151620002ab84826020860162000236565b91505092915050565b60008060408385031215620002ce57620002cd62000077565b5b600083015167ffffffffffffffff811115620002ef57620002ee6200007c565b5b620002fd85828601620001cd565b925050602083015167ffffffffffffffff8111156200032157620003206200007c565b5b6200032f8582860162000281565b9150509250929050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200038c57607f821691505b602082108103620003a257620003a162000344565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200040c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620003cd565b620004188683620003cd565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620004656200045f620004598462000430565b6200043a565b62000430565b9050919050565b6000819050919050565b620004818362000444565b6200049962000490826200046c565b848454620003da565b825550505050565b600090565b620004b0620004a1565b620004bd81848462000476565b505050565b5b81811015620004e557620004d9600082620004a6565b600181019050620004c3565b5050565b601f8211156200053457620004fe81620003a8565b6200050984620003bd565b8101602085101562000519578190505b620005316200052885620003bd565b830182620004c2565b50505b505050565b600082821c905092915050565b6000620005596000198460080262000539565b1980831691505092915050565b600062000574838362000546565b9150826002028217905092915050565b6200058f8262000339565b67ffffffffffffffff811115620005ab57620005aa6200009c565b5b620005b7825462000373565b620005c4828285620004e9565b600060209050601f831160018114620005fc5760008415620005e7578287015190505b620005f3858262000566565b86555062000663565b601f1984166200060c86620003a8565b60005b8281101562000636578489015182556001820191506020850194506020810190506200060f565b8683101562000656578489015162000652601f89168262000546565b8355505b6001600288020188555050505b505050505050565b600081519050919050565b60008190508160005260206000209050919050565b601f821115620006d657620006a08162000676565b620006ab84620003bd565b81016020851015620006bb578190505b620006d3620006ca85620003bd565b830182620004c2565b50505b505050565b620006e6826200066b565b67ffffffffffffffff8111156200070257620007016200009c565b5b6200070e825462000373565b6200071b8282856200068b565b600060209050601f8311600181146200075357600084156200073e578287015190505b6200074a858262000566565b865550620007ba565b601f198416620007638662000676565b60005b828110156200078d5784890151825560018201915060208501945060208101905062000766565b86831015620007ad5784890151620007a9601f89168262000546565b8355505b6001600288020188555050505b505050505050565b612f3d80620007d26000396000f3fe6080604052600436106100c55760003560e01c8063438eb46e1161007f578063b3752fa311610059578063b3752fa314610261578063b952cc4a1461028c578063ca88afbc146102b7578063e172c5cb146102f4576100cc565b8063438eb46e146101e457806349f289dc1461020d5780635d206fda14610238576100cc565b8062f714ce146100d157806302d12776146100fa5780630568b4d714610116578063116766a61461015357806321fb335c1461017e57806322f44022146101bb576100cc565b366100cc57005b600080fd5b3480156100dd57600080fd5b506100f860048036038101906100f39190611755565b610331565b005b610114600480360381019061010f919061186c565b6103d2565b005b34801561012257600080fd5b5061013d6004803603810190610138919061194b565b610b47565b60405161014a919061199a565b60405180910390f35b34801561015f57600080fd5b50610168610b7a565b60405161017591906119c4565b60405180910390f35b34801561018a57600080fd5b506101a560048036038101906101a09190611b38565b610b80565b6040516101b29190611bd6565b60405180910390f35b3480156101c757600080fd5b506101e260048036038101906101dd919061194b565b610c53565b005b3480156101f057600080fd5b5061020b6004803603810190610206919061194b565b610edf565b005b34801561021957600080fd5b50610222611053565b60405161022f9190611c70565b60405180910390f35b34801561024457600080fd5b5061025f600480360381019061025a9190611c92565b6110e1565b005b34801561026d57600080fd5b50610276611342565b6040516102839190611d3a565b60405180910390f35b34801561029857600080fd5b506102a16113d0565b6040516102ae91906119c4565b60405180910390f35b3480156102c357600080fd5b506102de60048036038101906102d99190611d5c565b6113d6565b6040516102eb919061199a565b60405180910390f35b34801561030057600080fd5b5061031b60048036038101906103169190611e3a565b6113fa565b6040516103289190611bd6565b60405180910390f35b6000600254476103419190611f10565b905082811015610386576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037d90611f90565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f193505050501580156103cc573d6000803e3d6000fd5b50505050565b600060018111156103e6576103e5611fb0565b5b8a60018111156103f9576103f8611fb0565b5b0361063d57600061040a8a8a610b47565b9050600060056000838152602001908152602001600020905060008160010160009054906101000a900463ffffffff1663ffffffff1614610480576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104779061202b565b60405180910390fd5b4287116104c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104b9906120bd565b60405180910390fd5b6002836104cf91906120dd565b471015610511576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105089061216b565b60405180910390fd5b898160000181905550888160010160006101000a81548163ffffffff021916908363ffffffff160217905550838160040160086101000a81548163ffffffff021916908363ffffffff160217905550878160020181905550868160030181905550858160040160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550600081600401600c6101000a81548160ff0219169083151502179055508481600401600d6101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508281600501819055506000816006018190555060008160070160006101000a81548163ffffffff021916908363ffffffff16021790555060016003600082825461062f919061218b565b925050819055505050610b3b565b6001808111156106505761064f611fb0565b5b8a600181111561066357610662611fb0565b5b03610b3a576000610674338a610b47565b90506000600560008381526020019081526020016000209050898160000154146106d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ca9061220b565b60405180910390fd5b8863ffffffff168160010160009054906101000a900463ffffffff1663ffffffff1614610735576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072c90612277565b60405180910390fd5b8363ffffffff168160040160089054906101000a900463ffffffff1663ffffffff1614610797576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078e906122e3565b60405180910390fd5b878160020154146107dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107d49061234f565b60405180910390fd5b86816003015414610823576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081a906123bb565b60405180910390fd5b8567ffffffffffffffff168160040160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1614610891576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088890612427565b60405180910390fd5b8467ffffffffffffffff1681600401600d9054906101000a900467ffffffffffffffff1667ffffffffffffffff16146108ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f690612493565b60405180910390fd5b82816005015414610945576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093c906124ff565b60405180910390fd5b6000151581600401600c9054906101000a900460ff1615151461099d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109949061256b565b60405180910390fd5b823410156109e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109d7906125d7565b60405180910390fd5b80600401600d9054906101000a900467ffffffffffffffff1667ffffffffffffffff168160020154610a12919061218b565b421115610a54576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4b90612643565b60405180910390fd5b600283610a6191906120dd565b471015610aa3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9a9061216b565b60405180910390fd5b600283610ab091906120dd565b60026000828254610ac1919061218b565b92505081905550600181600401600c6101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff166108fc8434610b0b9190611f10565b9081150290604051600060405180830381858888f19350505050158015610b36573d6000803e3d6000fd5b5050505b5b50505050505050505050565b60008282604051602001610b5c9291906126cc565b60405160208183030381529060405280519060200120905092915050565b60035481565b60008083905060005b8651811015610c44576000878281518110610ba757610ba66126f8565b5b602002602001015190506000600286610bc09190612756565b03610bf5578281604051602001610bd8929190612787565b604051602081830303815290604052805190602001209250610c21565b8083604051602001610c08929190612787565b6040516020818303038152906040528051906020012092505b600285610c2e91906127b3565b9450508080610c3c906127e4565b915050610b89565b50848114915050949350505050565b6000610c5f8383610b47565b9050600060056000838152602001908152602001600020905060008160010160009054906101000a900463ffffffff1663ffffffff1611610cd5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ccc90612878565b60405180910390fd5b6001151581600401600c9054906101000a900460ff16151514610d2d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d24906128e4565b60405180910390fd5b6000816006015411610d74576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6b90612950565b60405180910390fd5b8060040160009054906101000a900467ffffffffffffffff1667ffffffffffffffff168160060154610da6919061218b565b4211610de7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dde906129bc565b60405180910390fd5b600060028260050154610dfa91906120dd565b90508060026000828254610e0e9190611f10565b925050819055508473ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610e5b573d6000803e3d6000fd5b507f22cd95a98f968866886bf2e9f6c8af31f17c78f37500bf0b0ca6725de29c7abb858542604051610e8f939291906129eb565b60405180910390a160008260010160006101000a81548163ffffffff021916908363ffffffff160217905550600082600401600c6101000a81548160ff0219169083151502179055505050505050565b6000610eeb8383610b47565b9050600060056000838152602001908152602001600020905060008160010160009054906101000a900463ffffffff1663ffffffff1611610f61576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f5890612a6e565b60405180910390fd5b6001151581600401600c9054906101000a900460ff16151514610fb9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fb090612878565b60405180910390fd5b8060030154421015611000576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ff790612ada565b60405180910390fd5b6002816005015461101191906120dd565b600260008282546110229190611f10565b9250508190555060008160010160006101000a81548163ffffffff021916908363ffffffff16021790555050505050565b6001805461106090612b29565b80601f016020809104026020016040519081016040528092919081815260200182805461108c90612b29565b80156110d95780601f106110ae576101008083540402835291602001916110d9565b820191906000526020600020905b8154815290600101906020018083116110bc57829003601f168201915b505050505081565b60006110ed8484610b47565b9050600060056000838152602001908152602001600020905060008160010160009054906101000a900463ffffffff1663ffffffff1611611163576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161115a90612ba6565b60405180910390fd5b6001151581600401600c9054906101000a900460ff161515146111bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111b290612c12565b60405180910390fd5b60008363ffffffff16101580156111f157508060040160089054906101000a900463ffffffff1663ffffffff168363ffffffff16105b611230576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161122790612c7e565b60405180910390fd5b8060040160009054906101000a900467ffffffffffffffff1667ffffffffffffffff168160060154611262919061218b565b42116112a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161129a90612d10565b60405180910390fd5b428160060181905550828160070160006101000a81548163ffffffff021916908363ffffffff1602179055507f083b6024bc1dcbf2784878665777050c94a4eaceac2f9cb0688b8a93d25f49b38585428460040160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1642611321919061218b565b87604051611333959493929190612d3f565b60405180910390a15050505050565b6000805461134f90612b29565b80601f016020809104026020016040519081016040528092919081815260200182805461137b90612b29565b80156113c85780601f1061139d576101008083540402835291602001916113c8565b820191906000526020600020905b8154815290600101906020018083116113ab57829003601f168201915b505050505081565b60025481565b600481815481106113e657600080fd5b906000526020600020016000915090505481565b6000806114078888610b47565b9050600060056000838152602001908152602001600020905060008160010160009054906101000a900463ffffffff1663ffffffff161161147d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161147490612878565b60405180910390fd5b6001151581600401600c9054906101000a900460ff161515146114d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114cc906128e4565b60405180910390fd5b8060040160009054906101000a900467ffffffffffffffff1667ffffffffffffffff168160060154611507919061218b565b4210611548576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161153f90612dde565b60405180910390fd5b60008160070160009054906101000a900463ffffffff16905060008888604051611573929190612e3d565b6040518091039020905060006115d2888880806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508c848663ffffffff16610b80565b9050600115158115151461161b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161161290612ea2565b60405180910390fd5b7f125690aeed72600ce0497b2ecc092d1b1b925f244d54906a195066af49c8b0b78c8c8660070160009054906101000a900463ffffffff16426040516116649493929190612ec2565b60405180910390a16000846006018190555060008460070160006101000a81548163ffffffff021916908363ffffffff1602179055506001955050505050509695505050505050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6116d4816116c1565b81146116df57600080fd5b50565b6000813590506116f1816116cb565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611722826116f7565b9050919050565b61173281611717565b811461173d57600080fd5b50565b60008135905061174f81611729565b92915050565b6000806040838503121561176c5761176b6116b7565b5b600061177a858286016116e2565b925050602061178b85828601611740565b9150509250929050565b600281106117a257600080fd5b50565b6000813590506117b481611795565b92915050565b6000819050919050565b6117cd816117ba565b81146117d857600080fd5b50565b6000813590506117ea816117c4565b92915050565b600063ffffffff82169050919050565b611809816117f0565b811461181457600080fd5b50565b60008135905061182681611800565b92915050565b600067ffffffffffffffff82169050919050565b6118498161182c565b811461185457600080fd5b50565b60008135905061186681611840565b92915050565b6000806000806000806000806000806101408b8d0312156118905761188f6116b7565b5b600061189e8d828e016117a5565b9a505060206118af8d828e01611740565b99505060406118c08d828e016117db565b98505060606118d18d828e01611817565b97505060806118e28d828e016116e2565b96505060a06118f38d828e016116e2565b95505060c06119048d828e01611857565b94505060e06119158d828e01611857565b9350506101006119278d828e01611817565b9250506101206119398d828e016116e2565b9150509295989b9194979a5092959850565b60008060408385031215611962576119616116b7565b5b600061197085828601611740565b9250506020611981858286016117db565b9150509250929050565b611994816117ba565b82525050565b60006020820190506119af600083018461198b565b92915050565b6119be816116c1565b82525050565b60006020820190506119d960008301846119b5565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611a2d826119e4565b810181811067ffffffffffffffff82111715611a4c57611a4b6119f5565b5b80604052505050565b6000611a5f6116ad565b9050611a6b8282611a24565b919050565b600067ffffffffffffffff821115611a8b57611a8a6119f5565b5b602082029050602081019050919050565b600080fd5b6000611ab4611aaf84611a70565b611a55565b90508083825260208201905060208402830185811115611ad757611ad6611a9c565b5b835b81811015611b005780611aec88826117db565b845260208401935050602081019050611ad9565b5050509392505050565b600082601f830112611b1f57611b1e6119df565b5b8135611b2f848260208601611aa1565b91505092915050565b60008060008060808587031215611b5257611b516116b7565b5b600085013567ffffffffffffffff811115611b7057611b6f6116bc565b5b611b7c87828801611b0a565b9450506020611b8d878288016117db565b9350506040611b9e878288016117db565b9250506060611baf878288016116e2565b91505092959194509250565b60008115159050919050565b611bd081611bbb565b82525050565b6000602082019050611beb6000830184611bc7565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611c2b578082015181840152602081019050611c10565b60008484015250505050565b6000611c4282611bf1565b611c4c8185611bfc565b9350611c5c818560208601611c0d565b611c65816119e4565b840191505092915050565b60006020820190508181036000830152611c8a8184611c37565b905092915050565b600080600060608486031215611cab57611caa6116b7565b5b6000611cb986828701611740565b9350506020611cca868287016117db565b9250506040611cdb86828701611817565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000611d0c82611ce5565b611d168185611cf0565b9350611d26818560208601611c0d565b611d2f816119e4565b840191505092915050565b60006020820190508181036000830152611d548184611d01565b905092915050565b600060208284031215611d7257611d716116b7565b5b6000611d80848285016116e2565b91505092915050565b600080fd5b60008083601f840112611da457611da36119df565b5b8235905067ffffffffffffffff811115611dc157611dc0611d89565b5b602083019150836001820283011115611ddd57611ddc611a9c565b5b9250929050565b60008083601f840112611dfa57611df96119df565b5b8235905067ffffffffffffffff811115611e1757611e16611d89565b5b602083019150836020820283011115611e3357611e32611a9c565b5b9250929050565b60008060008060008060808789031215611e5757611e566116b7565b5b6000611e6589828a01611740565b9650506020611e7689828a016117db565b955050604087013567ffffffffffffffff811115611e9757611e966116bc565b5b611ea389828a01611d8e565b9450945050606087013567ffffffffffffffff811115611ec657611ec56116bc565b5b611ed289828a01611de4565b92509250509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611f1b826116c1565b9150611f26836116c1565b9250828203905081811115611f3e57611f3d611ee1565b5b92915050565b7f696e737566666963656e7420626c6e6300000000000000000000000000000000600082015250565b6000611f7a601083611bfc565b9150611f8582611f44565b602082019050919050565b60006020820190508181036000830152611fa981611f6d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f66696c6520616c72656164792073746f72656400000000000000000000000000600082015250565b6000612015601383611bfc565b915061202082611fdf565b602082019050919050565b6000602082019050818103600083015261204481612008565b9050919050565b7f74696d6572456e64206d757374206265203e2063757272656e742074696d657360008201527f74616d7000000000000000000000000000000000000000000000000000000000602082015250565b60006120a7602483611bfc565b91506120b28261204b565b604082019050919050565b600060208201905081810360008301526120d68161209a565b9050919050565b60006120e8826116c1565b91506120f3836116c1565b9250828202612101816116c1565b9150828204841483151761211857612117611ee1565b5b5092915050565b7f696e73756666696369656e7420636f6c6c61746572616c000000000000000000600082015250565b6000612155601783611bfc565b91506121608261211f565b602082019050919050565b6000602082019050818103600083015261218481612148565b9050919050565b6000612196826116c1565b91506121a1836116c1565b92508282019050808211156121b9576121b8611ee1565b5b92915050565b7f726f6f74206d69736d6174636800000000000000000000000000000000000000600082015250565b60006121f5600d83611bfc565b9150612200826121bf565b602082019050919050565b60006020820190508181036000830152612224816121e8565b9050919050565b7f73697a65206d69736d6174636800000000000000000000000000000000000000600082015250565b6000612261600d83611bfc565b915061226c8261222b565b602082019050919050565b6000602082019050818103600083015261229081612254565b9050919050565b7f7365676d656e7473206d69736d61746368000000000000000000000000000000600082015250565b60006122cd601183611bfc565b91506122d882612297565b602082019050919050565b600060208201905081810360008301526122fc816122c0565b9050919050565b7f74696d65727374617274206d69736d6174636800000000000000000000000000600082015250565b6000612339601383611bfc565b915061234482612303565b602082019050919050565b600060208201905081810360008301526123688161232c565b9050919050565b7f74696d6572656e64206d69736d61746368000000000000000000000000000000600082015250565b60006123a5601183611bfc565b91506123b08261236f565b602082019050919050565b600060208201905081810360008301526123d481612398565b9050919050565b7f70726f766554696d656f7574206d69736d617463680000000000000000000000600082015250565b6000612411601583611bfc565b915061241c826123db565b602082019050919050565b6000602082019050818103600083015261244081612404565b9050919050565b7f636f6e636c75646554696d656f75744c656e677468206d69736d617463680000600082015250565b600061247d601e83611bfc565b915061248882612447565b602082019050919050565b600060208201905081810360008301526124ac81612470565b9050919050565b7f62696420616d6f756e74206d69736d6174636800000000000000000000000000600082015250565b60006124e9601383611bfc565b91506124f4826124b3565b602082019050919050565b60006020820190508181036000830152612518816124dc565b9050919050565b7f7573657220636f6e636c7564656420616c726561647900000000000000000000600082015250565b6000612555601683611bfc565b91506125608261251f565b602082019050919050565b6000602082019050818103600083015261258481612548565b9050919050565b7f616d6f756e74206d757374206265203e3d20626964416d6f756e740000000000600082015250565b60006125c1601b83611bfc565b91506125cc8261258b565b602082019050919050565b600060208201905081810360008301526125f0816125b4565b9050919050565b7f636f6e636c7564652054696d6564206f75740000000000000000000000000000600082015250565b600061262d601283611bfc565b9150612638826125f7565b602082019050919050565b6000602082019050818103600083015261265c81612620565b9050919050565b60008160601b9050919050565b600061267b82612663565b9050919050565b600061268d82612670565b9050919050565b6126a56126a082611717565b612682565b82525050565b6000819050919050565b6126c66126c1826117ba565b6126ab565b82525050565b60006126d88285612694565b6014820191506126e882846126b5565b6020820191508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612761826116c1565b915061276c836116c1565b92508261277c5761277b612727565b5b828206905092915050565b600061279382856126b5565b6020820191506127a382846126b5565b6020820191508190509392505050565b60006127be826116c1565b91506127c9836116c1565b9250826127d9576127d8612727565b5b828204905092915050565b60006127ef826116c1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361282157612820611ee1565b5b600182019050919050565b7f696e76616c696420747800000000000000000000000000000000000000000000600082015250565b6000612862600a83611bfc565b915061286d8261282c565b602082019050919050565b6000602082019050818103600083015261289181612855565b9050919050565b7f7478206e6f7420636f6e636c7564656400000000000000000000000000000000600082015250565b60006128ce601083611bfc565b91506128d982612898565b602082019050919050565b600060208201905081810360008301526128fd816128c1565b9050919050565b7f76616c69646174696f6e206e6f74207374617274656400000000000000000000600082015250565b600061293a601683611bfc565b915061294582612904565b602082019050919050565b600060208201905081810360008301526129698161292d565b9050919050565b7f76616c69646174696f6e2077696e646f77206e6f742065787069726564000000600082015250565b60006129a6601d83611bfc565b91506129b182612970565b602082019050919050565b600060208201905081810360008301526129d581612999565b9050919050565b6129e581611717565b82525050565b6000606082019050612a0060008301866129dc565b612a0d602083018561198b565b612a1a60408301846119b5565b949350505050565b7f696e76616c6964206f7072000000000000000000000000000000000000000000600082015250565b6000612a58600b83611bfc565b9150612a6382612a22565b602082019050919050565b60006020820190508181036000830152612a8781612a4b565b9050919050565b7f6e6f742065787069726564000000000000000000000000000000000000000000600082015250565b6000612ac4600b83611bfc565b9150612acf82612a8e565b602082019050919050565b60006020820190508181036000830152612af381612ab7565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612b4157607f821691505b602082108103612b5457612b53612afa565b5b50919050565b7f6d617070696e6720646f65736e27742065786973747300000000000000000000600082015250565b6000612b90601683611bfc565b9150612b9b82612b5a565b602082019050919050565b60006020820190508181036000830152612bbf81612b83565b9050919050565b7f75736572206861736e277420636f6e636c756465640000000000000000000000600082015250565b6000612bfc601583611bfc565b9150612c0782612bc6565b602082019050919050565b60006020820190508181036000830152612c2b81612bef565b9050919050565b7f696e76616c6964207365676d656e74496e646578000000000000000000000000600082015250565b6000612c68601483611bfc565b9150612c7382612c32565b602082019050919050565b60006020820190508181036000830152612c9781612c5b565b9050919050565b7f76616c69646174696f6e20697320616c726561647920696e2070726f6772657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000612cfa602183611bfc565b9150612d0582612c9e565b604082019050919050565b60006020820190508181036000830152612d2981612ced565b9050919050565b612d39816117f0565b82525050565b600060a082019050612d5460008301886129dc565b612d61602083018761198b565b612d6e60408301866119b5565b612d7b60608301856119b5565b612d886080830184612d30565b9695505050505050565b7f76616c69646174696f6e2077696e646f77206578706972656400000000000000600082015250565b6000612dc8601983611bfc565b9150612dd382612d92565b602082019050919050565b60006020820190508181036000830152612df781612dbb565b9050919050565b600081905092915050565b82818337600083830152505050565b6000612e248385612dfe565b9350612e31838584612e09565b82840190509392505050565b6000612e4a828486612e18565b91508190509392505050565b7f696e76616c69642070726f6f6600000000000000000000000000000000000000600082015250565b6000612e8c600d83611bfc565b9150612e9782612e56565b602082019050919050565b60006020820190508181036000830152612ebb81612e7f565b9050919050565b6000608082019050612ed760008301876129dc565b612ee4602083018661198b565b612ef16040830185612d30565b612efe60608301846119b5565b9594505050505056fea26469706673582212206be22806d3c39cd743cbd47c8e94021d7ed2060fe57fd511b82dafba668584c664736f6c63430008110033",
}

// StorageNodeContractABI is the input ABI used to generate the binding from.
// Deprecated: Use StorageNodeContractMetaData.ABI instead.
var StorageNodeContractABI = StorageNodeContractMetaData.ABI

// StorageNodeContractBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StorageNodeContractMetaData.Bin instead.
var StorageNodeContractBin = StorageNodeContractMetaData.Bin

// DeployStorageNodeContract deploys a new Ethereum contract, binding an instance of StorageNodeContract to it.
func DeployStorageNodeContract(auth *bind.TransactOpts, backend bind.ContractBackend, _TLSCert []byte, _HOST string) (common.Address, *types.Transaction, *StorageNodeContract, error) {
	parsed, err := StorageNodeContractMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(StorageNodeContractBin), backend, _TLSCert, _HOST)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &StorageNodeContract{StorageNodeContractCaller: StorageNodeContractCaller{contract: contract}, StorageNodeContractTransactor: StorageNodeContractTransactor{contract: contract}, StorageNodeContractFilterer: StorageNodeContractFilterer{contract: contract}}, nil
}

// StorageNodeContract is an auto generated Go binding around an Ethereum contract.
type StorageNodeContract struct {
	StorageNodeContractCaller     // Read-only binding to the contract
	StorageNodeContractTransactor // Write-only binding to the contract
	StorageNodeContractFilterer   // Log filterer for contract events
}

// StorageNodeContractCaller is an auto generated read-only Go binding around an Ethereum contract.
type StorageNodeContractCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StorageNodeContractTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StorageNodeContractTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StorageNodeContractFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StorageNodeContractFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StorageNodeContractSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StorageNodeContractSession struct {
	Contract     *StorageNodeContract // Generic contract binding to set the session for
	CallOpts     bind.CallOpts        // Call options to use throughout this session
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// StorageNodeContractCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StorageNodeContractCallerSession struct {
	Contract *StorageNodeContractCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts              // Call options to use throughout this session
}

// StorageNodeContractTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StorageNodeContractTransactorSession struct {
	Contract     *StorageNodeContractTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts              // Transaction auth options to use throughout this session
}

// StorageNodeContractRaw is an auto generated low-level Go binding around an Ethereum contract.
type StorageNodeContractRaw struct {
	Contract *StorageNodeContract // Generic contract binding to access the raw methods on
}

// StorageNodeContractCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StorageNodeContractCallerRaw struct {
	Contract *StorageNodeContractCaller // Generic read-only contract binding to access the raw methods on
}

// StorageNodeContractTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StorageNodeContractTransactorRaw struct {
	Contract *StorageNodeContractTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStorageNodeContract creates a new instance of StorageNodeContract, bound to a specific deployed contract.
func NewStorageNodeContract(address common.Address, backend bind.ContractBackend) (*StorageNodeContract, error) {
	contract, err := bindStorageNodeContract(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &StorageNodeContract{StorageNodeContractCaller: StorageNodeContractCaller{contract: contract}, StorageNodeContractTransactor: StorageNodeContractTransactor{contract: contract}, StorageNodeContractFilterer: StorageNodeContractFilterer{contract: contract}}, nil
}

// NewStorageNodeContractCaller creates a new read-only instance of StorageNodeContract, bound to a specific deployed contract.
func NewStorageNodeContractCaller(address common.Address, caller bind.ContractCaller) (*StorageNodeContractCaller, error) {
	contract, err := bindStorageNodeContract(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StorageNodeContractCaller{contract: contract}, nil
}

// NewStorageNodeContractTransactor creates a new write-only instance of StorageNodeContract, bound to a specific deployed contract.
func NewStorageNodeContractTransactor(address common.Address, transactor bind.ContractTransactor) (*StorageNodeContractTransactor, error) {
	contract, err := bindStorageNodeContract(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StorageNodeContractTransactor{contract: contract}, nil
}

// NewStorageNodeContractFilterer creates a new log filterer instance of StorageNodeContract, bound to a specific deployed contract.
func NewStorageNodeContractFilterer(address common.Address, filterer bind.ContractFilterer) (*StorageNodeContractFilterer, error) {
	contract, err := bindStorageNodeContract(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StorageNodeContractFilterer{contract: contract}, nil
}

// bindStorageNodeContract binds a generic wrapper to an already deployed contract.
func bindStorageNodeContract(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StorageNodeContractABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StorageNodeContract *StorageNodeContractRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StorageNodeContract.Contract.StorageNodeContractCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StorageNodeContract *StorageNodeContractRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StorageNodeContract.Contract.StorageNodeContractTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StorageNodeContract *StorageNodeContractRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StorageNodeContract.Contract.StorageNodeContractTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StorageNodeContract *StorageNodeContractCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StorageNodeContract.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StorageNodeContract *StorageNodeContractTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StorageNodeContract.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StorageNodeContract *StorageNodeContractTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StorageNodeContract.Contract.contract.Transact(opts, method, params...)
}

// HOST is a free data retrieval call binding the contract method 0x49f289dc.
//
// Solidity: function HOST() view returns(string)
func (_StorageNodeContract *StorageNodeContractCaller) HOST(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _StorageNodeContract.contract.Call(opts, &out, "HOST")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// HOST is a free data retrieval call binding the contract method 0x49f289dc.
//
// Solidity: function HOST() view returns(string)
func (_StorageNodeContract *StorageNodeContractSession) HOST() (string, error) {
	return _StorageNodeContract.Contract.HOST(&_StorageNodeContract.CallOpts)
}

// HOST is a free data retrieval call binding the contract method 0x49f289dc.
//
// Solidity: function HOST() view returns(string)
func (_StorageNodeContract *StorageNodeContractCallerSession) HOST() (string, error) {
	return _StorageNodeContract.Contract.HOST(&_StorageNodeContract.CallOpts)
}

// TLSCert is a free data retrieval call binding the contract method 0xb3752fa3.
//
// Solidity: function TLSCert() view returns(bytes)
func (_StorageNodeContract *StorageNodeContractCaller) TLSCert(opts *bind.CallOpts) ([]byte, error) {
	var out []interface{}
	err := _StorageNodeContract.contract.Call(opts, &out, "TLSCert")

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// TLSCert is a free data retrieval call binding the contract method 0xb3752fa3.
//
// Solidity: function TLSCert() view returns(bytes)
func (_StorageNodeContract *StorageNodeContractSession) TLSCert() ([]byte, error) {
	return _StorageNodeContract.Contract.TLSCert(&_StorageNodeContract.CallOpts)
}

// TLSCert is a free data retrieval call binding the contract method 0xb3752fa3.
//
// Solidity: function TLSCert() view returns(bytes)
func (_StorageNodeContract *StorageNodeContractCallerSession) TLSCert() ([]byte, error) {
	return _StorageNodeContract.Contract.TLSCert(&_StorageNodeContract.CallOpts)
}

// ComputeKey is a free data retrieval call binding the contract method 0x0568b4d7.
//
// Solidity: function computeKey(address userAddress, bytes32 merkleRootHash) pure returns(bytes32)
func (_StorageNodeContract *StorageNodeContractCaller) ComputeKey(opts *bind.CallOpts, userAddress common.Address, merkleRootHash [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _StorageNodeContract.contract.Call(opts, &out, "computeKey", userAddress, merkleRootHash)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ComputeKey is a free data retrieval call binding the contract method 0x0568b4d7.
//
// Solidity: function computeKey(address userAddress, bytes32 merkleRootHash) pure returns(bytes32)
func (_StorageNodeContract *StorageNodeContractSession) ComputeKey(userAddress common.Address, merkleRootHash [32]byte) ([32]byte, error) {
	return _StorageNodeContract.Contract.ComputeKey(&_StorageNodeContract.CallOpts, userAddress, merkleRootHash)
}

// ComputeKey is a free data retrieval call binding the contract method 0x0568b4d7.
//
// Solidity: function computeKey(address userAddress, bytes32 merkleRootHash) pure returns(bytes32)
func (_StorageNodeContract *StorageNodeContractCallerSession) ComputeKey(userAddress common.Address, merkleRootHash [32]byte) ([32]byte, error) {
	return _StorageNodeContract.Contract.ComputeKey(&_StorageNodeContract.CallOpts, userAddress, merkleRootHash)
}

// LockedCollateral is a free data retrieval call binding the contract method 0xb952cc4a.
//
// Solidity: function lockedCollateral() view returns(uint256)
func (_StorageNodeContract *StorageNodeContractCaller) LockedCollateral(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StorageNodeContract.contract.Call(opts, &out, "lockedCollateral")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LockedCollateral is a free data retrieval call binding the contract method 0xb952cc4a.
//
// Solidity: function lockedCollateral() view returns(uint256)
func (_StorageNodeContract *StorageNodeContractSession) LockedCollateral() (*big.Int, error) {
	return _StorageNodeContract.Contract.LockedCollateral(&_StorageNodeContract.CallOpts)
}

// LockedCollateral is a free data retrieval call binding the contract method 0xb952cc4a.
//
// Solidity: function lockedCollateral() view returns(uint256)
func (_StorageNodeContract *StorageNodeContractCallerSession) LockedCollateral() (*big.Int, error) {
	return _StorageNodeContract.Contract.LockedCollateral(&_StorageNodeContract.CallOpts)
}

// MappingLength is a free data retrieval call binding the contract method 0x116766a6.
//
// Solidity: function mappingLength() view returns(uint256)
func (_StorageNodeContract *StorageNodeContractCaller) MappingLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StorageNodeContract.contract.Call(opts, &out, "mappingLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MappingLength is a free data retrieval call binding the contract method 0x116766a6.
//
// Solidity: function mappingLength() view returns(uint256)
func (_StorageNodeContract *StorageNodeContractSession) MappingLength() (*big.Int, error) {
	return _StorageNodeContract.Contract.MappingLength(&_StorageNodeContract.CallOpts)
}

// MappingLength is a free data retrieval call binding the contract method 0x116766a6.
//
// Solidity: function mappingLength() view returns(uint256)
func (_StorageNodeContract *StorageNodeContractCallerSession) MappingLength() (*big.Int, error) {
	return _StorageNodeContract.Contract.MappingLength(&_StorageNodeContract.CallOpts)
}

// MappingsList is a free data retrieval call binding the contract method 0xca88afbc.
//
// Solidity: function mappingsList(uint256 ) view returns(bytes32)
func (_StorageNodeContract *StorageNodeContractCaller) MappingsList(opts *bind.CallOpts, arg0 *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _StorageNodeContract.contract.Call(opts, &out, "mappingsList", arg0)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// MappingsList is a free data retrieval call binding the contract method 0xca88afbc.
//
// Solidity: function mappingsList(uint256 ) view returns(bytes32)
func (_StorageNodeContract *StorageNodeContractSession) MappingsList(arg0 *big.Int) ([32]byte, error) {
	return _StorageNodeContract.Contract.MappingsList(&_StorageNodeContract.CallOpts, arg0)
}

// MappingsList is a free data retrieval call binding the contract method 0xca88afbc.
//
// Solidity: function mappingsList(uint256 ) view returns(bytes32)
func (_StorageNodeContract *StorageNodeContractCallerSession) MappingsList(arg0 *big.Int) ([32]byte, error) {
	return _StorageNodeContract.Contract.MappingsList(&_StorageNodeContract.CallOpts, arg0)
}

// Verify is a free data retrieval call binding the contract method 0x21fb335c.
//
// Solidity: function verify(bytes32[] proof, bytes32 root, bytes32 leaf, uint256 index) pure returns(bool)
func (_StorageNodeContract *StorageNodeContractCaller) Verify(opts *bind.CallOpts, proof [][32]byte, root [32]byte, leaf [32]byte, index *big.Int) (bool, error) {
	var out []interface{}
	err := _StorageNodeContract.contract.Call(opts, &out, "verify", proof, root, leaf, index)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Verify is a free data retrieval call binding the contract method 0x21fb335c.
//
// Solidity: function verify(bytes32[] proof, bytes32 root, bytes32 leaf, uint256 index) pure returns(bool)
func (_StorageNodeContract *StorageNodeContractSession) Verify(proof [][32]byte, root [32]byte, leaf [32]byte, index *big.Int) (bool, error) {
	return _StorageNodeContract.Contract.Verify(&_StorageNodeContract.CallOpts, proof, root, leaf, index)
}

// Verify is a free data retrieval call binding the contract method 0x21fb335c.
//
// Solidity: function verify(bytes32[] proof, bytes32 root, bytes32 leaf, uint256 index) pure returns(bool)
func (_StorageNodeContract *StorageNodeContractCallerSession) Verify(proof [][32]byte, root [32]byte, leaf [32]byte, index *big.Int) (bool, error) {
	return _StorageNodeContract.Contract.Verify(&_StorageNodeContract.CallOpts, proof, root, leaf, index)
}

// ConcludeTransaction is a paid mutator transaction binding the contract method 0x02d12776.
//
// Solidity: function concludeTransaction(uint8 callerType, address userAddress, bytes32 merkleRootHash, uint32 fileSize, uint256 timerStart, uint256 timerEnd, uint64 proveTimeoutLength, uint64 concludeTimeoutLength, uint32 segmentsCount, uint256 bidAmount) payable returns()
func (_StorageNodeContract *StorageNodeContractTransactor) ConcludeTransaction(opts *bind.TransactOpts, callerType uint8, userAddress common.Address, merkleRootHash [32]byte, fileSize uint32, timerStart *big.Int, timerEnd *big.Int, proveTimeoutLength uint64, concludeTimeoutLength uint64, segmentsCount uint32, bidAmount *big.Int) (*types.Transaction, error) {
	return _StorageNodeContract.contract.Transact(opts, "concludeTransaction", callerType, userAddress, merkleRootHash, fileSize, timerStart, timerEnd, proveTimeoutLength, concludeTimeoutLength, segmentsCount, bidAmount)
}

// ConcludeTransaction is a paid mutator transaction binding the contract method 0x02d12776.
//
// Solidity: function concludeTransaction(uint8 callerType, address userAddress, bytes32 merkleRootHash, uint32 fileSize, uint256 timerStart, uint256 timerEnd, uint64 proveTimeoutLength, uint64 concludeTimeoutLength, uint32 segmentsCount, uint256 bidAmount) payable returns()
func (_StorageNodeContract *StorageNodeContractSession) ConcludeTransaction(callerType uint8, userAddress common.Address, merkleRootHash [32]byte, fileSize uint32, timerStart *big.Int, timerEnd *big.Int, proveTimeoutLength uint64, concludeTimeoutLength uint64, segmentsCount uint32, bidAmount *big.Int) (*types.Transaction, error) {
	return _StorageNodeContract.Contract.ConcludeTransaction(&_StorageNodeContract.TransactOpts, callerType, userAddress, merkleRootHash, fileSize, timerStart, timerEnd, proveTimeoutLength, concludeTimeoutLength, segmentsCount, bidAmount)
}

// ConcludeTransaction is a paid mutator transaction binding the contract method 0x02d12776.
//
// Solidity: function concludeTransaction(uint8 callerType, address userAddress, bytes32 merkleRootHash, uint32 fileSize, uint256 timerStart, uint256 timerEnd, uint64 proveTimeoutLength, uint64 concludeTimeoutLength, uint32 segmentsCount, uint256 bidAmount) payable returns()
func (_StorageNodeContract *StorageNodeContractTransactorSession) ConcludeTransaction(callerType uint8, userAddress common.Address, merkleRootHash [32]byte, fileSize uint32, timerStart *big.Int, timerEnd *big.Int, proveTimeoutLength uint64, concludeTimeoutLength uint64, segmentsCount uint32, bidAmount *big.Int) (*types.Transaction, error) {
	return _StorageNodeContract.Contract.ConcludeTransaction(&_StorageNodeContract.TransactOpts, callerType, userAddress, merkleRootHash, fileSize, timerStart, timerEnd, proveTimeoutLength, concludeTimeoutLength, segmentsCount, bidAmount)
}

// FinishTransaction is a paid mutator transaction binding the contract method 0x438eb46e.
//
// Solidity: function finishTransaction(address userAddress, bytes32 merkleRootHash) returns()
func (_StorageNodeContract *StorageNodeContractTransactor) FinishTransaction(opts *bind.TransactOpts, userAddress common.Address, merkleRootHash [32]byte) (*types.Transaction, error) {
	return _StorageNodeContract.contract.Transact(opts, "finishTransaction", userAddress, merkleRootHash)
}

// FinishTransaction is a paid mutator transaction binding the contract method 0x438eb46e.
//
// Solidity: function finishTransaction(address userAddress, bytes32 merkleRootHash) returns()
func (_StorageNodeContract *StorageNodeContractSession) FinishTransaction(userAddress common.Address, merkleRootHash [32]byte) (*types.Transaction, error) {
	return _StorageNodeContract.Contract.FinishTransaction(&_StorageNodeContract.TransactOpts, userAddress, merkleRootHash)
}

// FinishTransaction is a paid mutator transaction binding the contract method 0x438eb46e.
//
// Solidity: function finishTransaction(address userAddress, bytes32 merkleRootHash) returns()
func (_StorageNodeContract *StorageNodeContractTransactorSession) FinishTransaction(userAddress common.Address, merkleRootHash [32]byte) (*types.Transaction, error) {
	return _StorageNodeContract.Contract.FinishTransaction(&_StorageNodeContract.TransactOpts, userAddress, merkleRootHash)
}

// ProcessValidation is a paid mutator transaction binding the contract method 0xe172c5cb.
//
// Solidity: function processValidation(address userAddress, bytes32 rootHash, bytes data, bytes32[] proof) returns(bool)
func (_StorageNodeContract *StorageNodeContractTransactor) ProcessValidation(opts *bind.TransactOpts, userAddress common.Address, rootHash [32]byte, data []byte, proof [][32]byte) (*types.Transaction, error) {
	return _StorageNodeContract.contract.Transact(opts, "processValidation", userAddress, rootHash, data, proof)
}

// ProcessValidation is a paid mutator transaction binding the contract method 0xe172c5cb.
//
// Solidity: function processValidation(address userAddress, bytes32 rootHash, bytes data, bytes32[] proof) returns(bool)
func (_StorageNodeContract *StorageNodeContractSession) ProcessValidation(userAddress common.Address, rootHash [32]byte, data []byte, proof [][32]byte) (*types.Transaction, error) {
	return _StorageNodeContract.Contract.ProcessValidation(&_StorageNodeContract.TransactOpts, userAddress, rootHash, data, proof)
}

// ProcessValidation is a paid mutator transaction binding the contract method 0xe172c5cb.
//
// Solidity: function processValidation(address userAddress, bytes32 rootHash, bytes data, bytes32[] proof) returns(bool)
func (_StorageNodeContract *StorageNodeContractTransactorSession) ProcessValidation(userAddress common.Address, rootHash [32]byte, data []byte, proof [][32]byte) (*types.Transaction, error) {
	return _StorageNodeContract.Contract.ProcessValidation(&_StorageNodeContract.TransactOpts, userAddress, rootHash, data, proof)
}

// ValidateStorage is a paid mutator transaction binding the contract method 0x5d206fda.
//
// Solidity: function validateStorage(address userAddress, bytes32 fileRootHash, uint32 segmentIndex) returns()
func (_StorageNodeContract *StorageNodeContractTransactor) ValidateStorage(opts *bind.TransactOpts, userAddress common.Address, fileRootHash [32]byte, segmentIndex uint32) (*types.Transaction, error) {
	return _StorageNodeContract.contract.Transact(opts, "validateStorage", userAddress, fileRootHash, segmentIndex)
}

// ValidateStorage is a paid mutator transaction binding the contract method 0x5d206fda.
//
// Solidity: function validateStorage(address userAddress, bytes32 fileRootHash, uint32 segmentIndex) returns()
func (_StorageNodeContract *StorageNodeContractSession) ValidateStorage(userAddress common.Address, fileRootHash [32]byte, segmentIndex uint32) (*types.Transaction, error) {
	return _StorageNodeContract.Contract.ValidateStorage(&_StorageNodeContract.TransactOpts, userAddress, fileRootHash, segmentIndex)
}

// ValidateStorage is a paid mutator transaction binding the contract method 0x5d206fda.
//
// Solidity: function validateStorage(address userAddress, bytes32 fileRootHash, uint32 segmentIndex) returns()
func (_StorageNodeContract *StorageNodeContractTransactorSession) ValidateStorage(userAddress common.Address, fileRootHash [32]byte, segmentIndex uint32) (*types.Transaction, error) {
	return _StorageNodeContract.Contract.ValidateStorage(&_StorageNodeContract.TransactOpts, userAddress, fileRootHash, segmentIndex)
}

// ValidationExpired is a paid mutator transaction binding the contract method 0x22f44022.
//
// Solidity: function validationExpired(address userAddress, bytes32 rootHash) returns()
func (_StorageNodeContract *StorageNodeContractTransactor) ValidationExpired(opts *bind.TransactOpts, userAddress common.Address, rootHash [32]byte) (*types.Transaction, error) {
	return _StorageNodeContract.contract.Transact(opts, "validationExpired", userAddress, rootHash)
}

// ValidationExpired is a paid mutator transaction binding the contract method 0x22f44022.
//
// Solidity: function validationExpired(address userAddress, bytes32 rootHash) returns()
func (_StorageNodeContract *StorageNodeContractSession) ValidationExpired(userAddress common.Address, rootHash [32]byte) (*types.Transaction, error) {
	return _StorageNodeContract.Contract.ValidationExpired(&_StorageNodeContract.TransactOpts, userAddress, rootHash)
}

// ValidationExpired is a paid mutator transaction binding the contract method 0x22f44022.
//
// Solidity: function validationExpired(address userAddress, bytes32 rootHash) returns()
func (_StorageNodeContract *StorageNodeContractTransactorSession) ValidationExpired(userAddress common.Address, rootHash [32]byte) (*types.Transaction, error) {
	return _StorageNodeContract.Contract.ValidationExpired(&_StorageNodeContract.TransactOpts, userAddress, rootHash)
}

// Withdraw is a paid mutator transaction binding the contract method 0x00f714ce.
//
// Solidity: function withdraw(uint256 amount, address target) returns()
func (_StorageNodeContract *StorageNodeContractTransactor) Withdraw(opts *bind.TransactOpts, amount *big.Int, target common.Address) (*types.Transaction, error) {
	return _StorageNodeContract.contract.Transact(opts, "withdraw", amount, target)
}

// Withdraw is a paid mutator transaction binding the contract method 0x00f714ce.
//
// Solidity: function withdraw(uint256 amount, address target) returns()
func (_StorageNodeContract *StorageNodeContractSession) Withdraw(amount *big.Int, target common.Address) (*types.Transaction, error) {
	return _StorageNodeContract.Contract.Withdraw(&_StorageNodeContract.TransactOpts, amount, target)
}

// Withdraw is a paid mutator transaction binding the contract method 0x00f714ce.
//
// Solidity: function withdraw(uint256 amount, address target) returns()
func (_StorageNodeContract *StorageNodeContractTransactorSession) Withdraw(amount *big.Int, target common.Address) (*types.Transaction, error) {
	return _StorageNodeContract.Contract.Withdraw(&_StorageNodeContract.TransactOpts, amount, target)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_StorageNodeContract *StorageNodeContractTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StorageNodeContract.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_StorageNodeContract *StorageNodeContractSession) Receive() (*types.Transaction, error) {
	return _StorageNodeContract.Contract.Receive(&_StorageNodeContract.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_StorageNodeContract *StorageNodeContractTransactorSession) Receive() (*types.Transaction, error) {
	return _StorageNodeContract.Contract.Receive(&_StorageNodeContract.TransactOpts)
}

// StorageNodeContractEvProveStorageIterator is returned from FilterEvProveStorage and is used to iterate over the raw logs and unpacked data for EvProveStorage events raised by the StorageNodeContract contract.
type StorageNodeContractEvProveStorageIterator struct {
	Event *StorageNodeContractEvProveStorage // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StorageNodeContractEvProveStorageIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StorageNodeContractEvProveStorage)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StorageNodeContractEvProveStorage)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StorageNodeContractEvProveStorageIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StorageNodeContractEvProveStorageIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StorageNodeContractEvProveStorage represents a EvProveStorage event raised by the StorageNodeContract contract.
type StorageNodeContractEvProveStorage struct {
	UserAddress        common.Address
	FileMerkleRootHash [32]byte
	Timestamp          *big.Int
	ExpiryTimestamp    *big.Int
	SegmentIndex       uint32
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterEvProveStorage is a free log retrieval operation binding the contract event 0x083b6024bc1dcbf2784878665777050c94a4eaceac2f9cb0688b8a93d25f49b3.
//
// Solidity: event EvProveStorage(address userAddress, bytes32 fileMerkleRootHash, uint256 timestamp, uint256 expiryTimestamp, uint32 segmentIndex)
func (_StorageNodeContract *StorageNodeContractFilterer) FilterEvProveStorage(opts *bind.FilterOpts) (*StorageNodeContractEvProveStorageIterator, error) {

	logs, sub, err := _StorageNodeContract.contract.FilterLogs(opts, "EvProveStorage")
	if err != nil {
		return nil, err
	}
	return &StorageNodeContractEvProveStorageIterator{contract: _StorageNodeContract.contract, event: "EvProveStorage", logs: logs, sub: sub}, nil
}

// WatchEvProveStorage is a free log subscription operation binding the contract event 0x083b6024bc1dcbf2784878665777050c94a4eaceac2f9cb0688b8a93d25f49b3.
//
// Solidity: event EvProveStorage(address userAddress, bytes32 fileMerkleRootHash, uint256 timestamp, uint256 expiryTimestamp, uint32 segmentIndex)
func (_StorageNodeContract *StorageNodeContractFilterer) WatchEvProveStorage(opts *bind.WatchOpts, sink chan<- *StorageNodeContractEvProveStorage) (event.Subscription, error) {

	logs, sub, err := _StorageNodeContract.contract.WatchLogs(opts, "EvProveStorage")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StorageNodeContractEvProveStorage)
				if err := _StorageNodeContract.contract.UnpackLog(event, "EvProveStorage", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEvProveStorage is a log parse operation binding the contract event 0x083b6024bc1dcbf2784878665777050c94a4eaceac2f9cb0688b8a93d25f49b3.
//
// Solidity: event EvProveStorage(address userAddress, bytes32 fileMerkleRootHash, uint256 timestamp, uint256 expiryTimestamp, uint32 segmentIndex)
func (_StorageNodeContract *StorageNodeContractFilterer) ParseEvProveStorage(log types.Log) (*StorageNodeContractEvProveStorage, error) {
	event := new(StorageNodeContractEvProveStorage)
	if err := _StorageNodeContract.contract.UnpackLog(event, "EvProveStorage", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StorageNodeContractEvValidationExpiredIterator is returned from FilterEvValidationExpired and is used to iterate over the raw logs and unpacked data for EvValidationExpired events raised by the StorageNodeContract contract.
type StorageNodeContractEvValidationExpiredIterator struct {
	Event *StorageNodeContractEvValidationExpired // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StorageNodeContractEvValidationExpiredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StorageNodeContractEvValidationExpired)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StorageNodeContractEvValidationExpired)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StorageNodeContractEvValidationExpiredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StorageNodeContractEvValidationExpiredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StorageNodeContractEvValidationExpired represents a EvValidationExpired event raised by the StorageNodeContract contract.
type StorageNodeContractEvValidationExpired struct {
	UserAddress        common.Address
	FileMerkleRootHash [32]byte
	Timestamp          *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterEvValidationExpired is a free log retrieval operation binding the contract event 0x22cd95a98f968866886bf2e9f6c8af31f17c78f37500bf0b0ca6725de29c7abb.
//
// Solidity: event EvValidationExpired(address userAddress, bytes32 fileMerkleRootHash, uint256 timestamp)
func (_StorageNodeContract *StorageNodeContractFilterer) FilterEvValidationExpired(opts *bind.FilterOpts) (*StorageNodeContractEvValidationExpiredIterator, error) {

	logs, sub, err := _StorageNodeContract.contract.FilterLogs(opts, "EvValidationExpired")
	if err != nil {
		return nil, err
	}
	return &StorageNodeContractEvValidationExpiredIterator{contract: _StorageNodeContract.contract, event: "EvValidationExpired", logs: logs, sub: sub}, nil
}

// WatchEvValidationExpired is a free log subscription operation binding the contract event 0x22cd95a98f968866886bf2e9f6c8af31f17c78f37500bf0b0ca6725de29c7abb.
//
// Solidity: event EvValidationExpired(address userAddress, bytes32 fileMerkleRootHash, uint256 timestamp)
func (_StorageNodeContract *StorageNodeContractFilterer) WatchEvValidationExpired(opts *bind.WatchOpts, sink chan<- *StorageNodeContractEvValidationExpired) (event.Subscription, error) {

	logs, sub, err := _StorageNodeContract.contract.WatchLogs(opts, "EvValidationExpired")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StorageNodeContractEvValidationExpired)
				if err := _StorageNodeContract.contract.UnpackLog(event, "EvValidationExpired", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEvValidationExpired is a log parse operation binding the contract event 0x22cd95a98f968866886bf2e9f6c8af31f17c78f37500bf0b0ca6725de29c7abb.
//
// Solidity: event EvValidationExpired(address userAddress, bytes32 fileMerkleRootHash, uint256 timestamp)
func (_StorageNodeContract *StorageNodeContractFilterer) ParseEvValidationExpired(log types.Log) (*StorageNodeContractEvValidationExpired, error) {
	event := new(StorageNodeContractEvValidationExpired)
	if err := _StorageNodeContract.contract.UnpackLog(event, "EvValidationExpired", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StorageNodeContractEvValidationSubmittedIterator is returned from FilterEvValidationSubmitted and is used to iterate over the raw logs and unpacked data for EvValidationSubmitted events raised by the StorageNodeContract contract.
type StorageNodeContractEvValidationSubmittedIterator struct {
	Event *StorageNodeContractEvValidationSubmitted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StorageNodeContractEvValidationSubmittedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StorageNodeContractEvValidationSubmitted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StorageNodeContractEvValidationSubmitted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StorageNodeContractEvValidationSubmittedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StorageNodeContractEvValidationSubmittedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StorageNodeContractEvValidationSubmitted represents a EvValidationSubmitted event raised by the StorageNodeContract contract.
type StorageNodeContractEvValidationSubmitted struct {
	UserAddress    common.Address
	FileMerkleRoot [32]byte
	SegmentIndex   uint32
	Timestamp      *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterEvValidationSubmitted is a free log retrieval operation binding the contract event 0x125690aeed72600ce0497b2ecc092d1b1b925f244d54906a195066af49c8b0b7.
//
// Solidity: event EvValidationSubmitted(address userAddress, bytes32 fileMerkleRoot, uint32 segmentIndex, uint256 timestamp)
func (_StorageNodeContract *StorageNodeContractFilterer) FilterEvValidationSubmitted(opts *bind.FilterOpts) (*StorageNodeContractEvValidationSubmittedIterator, error) {

	logs, sub, err := _StorageNodeContract.contract.FilterLogs(opts, "EvValidationSubmitted")
	if err != nil {
		return nil, err
	}
	return &StorageNodeContractEvValidationSubmittedIterator{contract: _StorageNodeContract.contract, event: "EvValidationSubmitted", logs: logs, sub: sub}, nil
}

// WatchEvValidationSubmitted is a free log subscription operation binding the contract event 0x125690aeed72600ce0497b2ecc092d1b1b925f244d54906a195066af49c8b0b7.
//
// Solidity: event EvValidationSubmitted(address userAddress, bytes32 fileMerkleRoot, uint32 segmentIndex, uint256 timestamp)
func (_StorageNodeContract *StorageNodeContractFilterer) WatchEvValidationSubmitted(opts *bind.WatchOpts, sink chan<- *StorageNodeContractEvValidationSubmitted) (event.Subscription, error) {

	logs, sub, err := _StorageNodeContract.contract.WatchLogs(opts, "EvValidationSubmitted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StorageNodeContractEvValidationSubmitted)
				if err := _StorageNodeContract.contract.UnpackLog(event, "EvValidationSubmitted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEvValidationSubmitted is a log parse operation binding the contract event 0x125690aeed72600ce0497b2ecc092d1b1b925f244d54906a195066af49c8b0b7.
//
// Solidity: event EvValidationSubmitted(address userAddress, bytes32 fileMerkleRoot, uint32 segmentIndex, uint256 timestamp)
func (_StorageNodeContract *StorageNodeContractFilterer) ParseEvValidationSubmitted(log types.Log) (*StorageNodeContractEvValidationSubmitted, error) {
	event := new(StorageNodeContractEvValidationSubmitted)
	if err := _StorageNodeContract.contract.UnpackLog(event, "EvValidationSubmitted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
