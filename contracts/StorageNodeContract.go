// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package StorageNodeContract

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// StorageNodeContractMetaData contains all meta data concerning the StorageNodeContract contract.
var StorageNodeContractMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_TLSCert\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"_HOST\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"fileMerkleRootHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiryTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"segmentIndex\",\"type\":\"uint32\"}],\"name\":\"EvProveStorage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enumStorageNode.CallerType\",\"name\":\"caller\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"merkleRootHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"fileSize\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timerStart\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timerEnd\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"proveTimeoutLength\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"concludeTimeoutLength\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"segmentsCount\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"computedKey\",\"type\":\"bytes32\"}],\"name\":\"EvTxConclude\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"fileMerkleRootHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"EvValidationExpired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"fileMerkleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"segmentIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"EvValidationSubmitted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"HOST\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TLSCert\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRootHash\",\"type\":\"bytes32\"}],\"name\":\"computeKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enumStorageNode.CallerType\",\"name\":\"callerType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRootHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"fileSize\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"timerStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timerEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"proveTimeoutLength\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"concludeTimeoutLength\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"segmentsCount\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"bidAmount\",\"type\":\"uint256\"}],\"name\":\"concludeTransaction\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRootHash\",\"type\":\"bytes32\"}],\"name\":\"finishTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mappingLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mappingsList\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"rootHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"processValidation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"fileRootHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"segmentIndex\",\"type\":\"uint32\"}],\"name\":\"validateStorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"rootHash\",\"type\":\"bytes32\"}],\"name\":\"validationExpired\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "0x6080604052600060035560006004553480156200001b57600080fd5b5060405162003f5138038062003f5183398181016040528101906200004191906200035b565b826000908162000052919062000640565b50816001908162000064919062000797565b5080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050506200087e565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200011882620000cd565b810181811067ffffffffffffffff821117156200013a5762000139620000de565b5b80604052505050565b60006200014f620000af565b90506200015d82826200010d565b919050565b600067ffffffffffffffff82111562000180576200017f620000de565b5b6200018b82620000cd565b9050602081019050919050565b60005b83811015620001b85780820151818401526020810190506200019b565b60008484015250505050565b6000620001db620001d58462000162565b62000143565b905082815260208101848484011115620001fa57620001f9620000c8565b5b6200020784828562000198565b509392505050565b600082601f830112620002275762000226620000c3565b5b815162000239848260208601620001c4565b91505092915050565b600067ffffffffffffffff82111562000260576200025f620000de565b5b6200026b82620000cd565b9050602081019050919050565b60006200028f620002898462000242565b62000143565b905082815260208101848484011115620002ae57620002ad620000c8565b5b620002bb84828562000198565b509392505050565b600082601f830112620002db57620002da620000c3565b5b8151620002ed84826020860162000278565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200032382620002f6565b9050919050565b620003358162000316565b81146200034157600080fd5b50565b60008151905062000355816200032a565b92915050565b600080600060608486031215620003775762000376620000b9565b5b600084015167ffffffffffffffff811115620003985762000397620000be565b5b620003a6868287016200020f565b935050602084015167ffffffffffffffff811115620003ca57620003c9620000be565b5b620003d886828701620002c3565b9250506040620003eb8682870162000344565b9150509250925092565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200044857607f821691505b6020821081036200045e576200045d62000400565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620004c87fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000489565b620004d4868362000489565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620005216200051b6200051584620004ec565b620004f6565b620004ec565b9050919050565b6000819050919050565b6200053d8362000500565b620005556200054c8262000528565b84845462000496565b825550505050565b600090565b6200056c6200055d565b6200057981848462000532565b505050565b5b81811015620005a1576200059560008262000562565b6001810190506200057f565b5050565b601f821115620005f057620005ba8162000464565b620005c58462000479565b81016020851015620005d5578190505b620005ed620005e48562000479565b8301826200057e565b50505b505050565b600082821c905092915050565b60006200061560001984600802620005f5565b1980831691505092915050565b600062000630838362000602565b9150826002028217905092915050565b6200064b82620003f5565b67ffffffffffffffff811115620006675762000666620000de565b5b6200067382546200042f565b62000680828285620005a5565b600060209050601f831160018114620006b85760008415620006a3578287015190505b620006af858262000622565b8655506200071f565b601f198416620006c88662000464565b60005b82811015620006f257848901518255600182019150602085019450602081019050620006cb565b868310156200071257848901516200070e601f89168262000602565b8355505b6001600288020188555050505b505050505050565b600081519050919050565b60008190508160005260206000209050919050565b601f82111562000792576200075c8162000732565b620007678462000479565b8101602085101562000777578190505b6200078f620007868562000479565b8301826200057e565b50505b505050565b620007a28262000727565b67ffffffffffffffff811115620007be57620007bd620000de565b5b620007ca82546200042f565b620007d782828562000747565b600060209050601f8311600181146200080f5760008415620007fa578287015190505b62000806858262000622565b86555062000876565b601f1984166200081f8662000732565b60005b82811015620008495784890151825560018201915060208501945060208101905062000822565b8683101562000869578489015162000865601f89168262000602565b8355505b6001600288020188555050505b505050505050565b6136c3806200088e6000396000f3fe6080604052600436106100e05760003560e01c806349f289dc1161007f578063b3752fa311610059578063b3752fa3146102a7578063b952cc4a146102d2578063ca88afbc146102fd578063e172c5cb1461033a576100e7565b806349f289dc146102285780635d206fda146102535780638da5cb5b1461027c576100e7565b8063116766a6116100bb578063116766a61461016e57806321fb335c1461019957806322f44022146101d6578063438eb46e146101ff576100e7565b8062f714ce146100ec57806302d12776146101155780630568b4d714610131576100e7565b366100e757005b600080fd5b3480156100f857600080fd5b50610113600480360381019061010e9190611b30565b610377565b005b61012f600480360381019061012a9190611c47565b6104a8565b005b34801561013d57600080fd5b5061015860048036038101906101539190611d26565b610ddb565b6040516101659190611d75565b60405180910390f35b34801561017a57600080fd5b50610183610e0e565b6040516101909190611d9f565b60405180910390f35b3480156101a557600080fd5b506101c060048036038101906101bb9190611f13565b610e14565b6040516101cd9190611fb1565b60405180910390f35b3480156101e257600080fd5b506101fd60048036038101906101f89190611d26565b610ee7565b005b34801561020b57600080fd5b5061022660048036038101906102219190611d26565b611173565b005b34801561023457600080fd5b5061023d611377565b60405161024a919061204b565b60405180910390f35b34801561025f57600080fd5b5061027a6004803603810190610275919061206d565b611405565b005b34801561028857600080fd5b50610291611666565b60405161029e91906120cf565b60405180910390f35b3480156102b357600080fd5b506102bc61168c565b6040516102c9919061213f565b60405180910390f35b3480156102de57600080fd5b506102e761171a565b6040516102f49190611d9f565b60405180910390f35b34801561030957600080fd5b50610324600480360381019061031f9190612161565b611720565b6040516103319190611d75565b60405180910390f35b34801561034657600080fd5b50610361600480360381019061035c919061223f565b611744565b60405161036e9190611fb1565b60405180910390f35b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610407576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103fe90612332565b60405180910390fd5b6000600354476104179190612381565b90508281101561045c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045390612401565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f193505050501580156104a2573d6000803e3d6000fd5b50505050565b600060018111156104bc576104bb612421565b5b8a60018111156104cf576104ce612421565b5b0361082957600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610564576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055b9061249c565b60405180910390fd5b60006105708a8a610ddb565b90507fde729c542d0fb1cd20ede760929f2a44110cc6bf302ceb404ba199b749e9633b8b8b8b8b8b8b8b8b8b8b8b6040516105b59b9a99989796959493929190612522565b60405180910390a1600060066000838152602001908152602001600020905060008160010160009054906101000a900463ffffffff1663ffffffff16148061062d575080600401600d9054906101000a900467ffffffffffffffff1667ffffffffffffffff16816002015461062a91906125cd565b42115b61066c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066390612673565b60405180910390fd5b4287116106ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a590612705565b60405180910390fd5b6002836106bb9190612725565b4710156106fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f4906127b3565b60405180910390fd5b898160000181905550888160010160006101000a81548163ffffffff021916908363ffffffff160217905550838160040160086101000a81548163ffffffff021916908363ffffffff160217905550878160020181905550868160030181905550858160040160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550600081600401600c6101000a81548160ff0219169083151502179055508481600401600d6101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508281600501819055506000816006018190555060008160070160006101000a81548163ffffffff021916908363ffffffff16021790555060016004600082825461081b91906125cd565b925050819055505050610dcf565b60018081111561083c5761083b612421565b5b8a600181111561084f5761084e612421565b5b03610dce576000610860338a610ddb565b90507fde729c542d0fb1cd20ede760929f2a44110cc6bf302ceb404ba199b749e9633b8b8b8b8b8b8b8b8b8b8b8b6040516108a59b9a99989796959493929190612522565b60405180910390a1600060066000838152602001908152602001600020905060008160010160009054906101000a900463ffffffff1663ffffffff1611610921576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091890612845565b60405180910390fd5b89816000015414610967576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095e906128b1565b60405180910390fd5b8863ffffffff168160010160009054906101000a900463ffffffff1663ffffffff16146109c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109c09061291d565b60405180910390fd5b8363ffffffff168160040160089054906101000a900463ffffffff1663ffffffff1614610a2b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2290612989565b60405180910390fd5b87816002015414610a71576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a68906129f5565b60405180910390fd5b86816003015414610ab7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aae90612a61565b60405180910390fd5b8567ffffffffffffffff168160040160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1614610b25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1c90612acd565b60405180910390fd5b8467ffffffffffffffff1681600401600d9054906101000a900467ffffffffffffffff1667ffffffffffffffff1614610b93576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b8a90612b39565b60405180910390fd5b82816005015414610bd9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bd090612ba5565b60405180910390fd5b6000151581600401600c9054906101000a900460ff16151514610c31576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2890612c11565b60405180910390fd5b82341015610c74576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c6b90612c7d565b60405180910390fd5b80600401600d9054906101000a900467ffffffffffffffff1667ffffffffffffffff168160020154610ca691906125cd565b421115610ce8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cdf90612ce9565b60405180910390fd5b600283610cf59190612725565b471015610d37576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2e906127b3565b60405180910390fd5b600283610d449190612725565b60036000828254610d5591906125cd565b92505081905550600181600401600c6101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff166108fc8434610d9f9190612381565b9081150290604051600060405180830381858888f19350505050158015610dca573d6000803e3d6000fd5b5050505b5b50505050505050505050565b60008282604051602001610df0929190612d72565b60405160208183030381529060405280519060200120905092915050565b60045481565b60008083905060005b8651811015610ed8576000878281518110610e3b57610e3a612d9e565b5b602002602001015190506000600286610e549190612dfc565b03610e89578281604051602001610e6c929190612e2d565b604051602081830303815290604052805190602001209250610eb5565b8083604051602001610e9c929190612e2d565b6040516020818303038152906040528051906020012092505b600285610ec29190612e59565b9450508080610ed090612e8a565b915050610e1d565b50848114915050949350505050565b6000610ef38383610ddb565b9050600060066000838152602001908152602001600020905060008160010160009054906101000a900463ffffffff1663ffffffff1611610f69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f6090612f1e565b60405180910390fd5b6001151581600401600c9054906101000a900460ff16151514610fc1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fb890612f8a565b60405180910390fd5b6000816006015411611008576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fff90612ff6565b60405180910390fd5b8060040160009054906101000a900467ffffffffffffffff1667ffffffffffffffff16816006015461103a91906125cd565b421161107b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161107290613062565b60405180910390fd5b60006002826005015461108e9190612725565b905080600360008282546110a29190612381565b925050819055508473ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156110ef573d6000803e3d6000fd5b507f22cd95a98f968866886bf2e9f6c8af31f17c78f37500bf0b0ca6725de29c7abb85854260405161112393929190613082565b60405180910390a160008260010160006101000a81548163ffffffff021916908363ffffffff160217905550600082600401600c6101000a81548160ff0219169083151502179055505050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611203576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111fa90613105565b60405180910390fd5b600061120f8383610ddb565b9050600060066000838152602001908152602001600020905060008160010160009054906101000a900463ffffffff1663ffffffff1611611285576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161127c90613171565b60405180910390fd5b6001151581600401600c9054906101000a900460ff161515146112dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112d490612f1e565b60405180910390fd5b8060030154421015611324576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161131b906131dd565b60405180910390fd5b600281600501546113359190612725565b600360008282546113469190612381565b9250508190555060008160010160006101000a81548163ffffffff021916908363ffffffff16021790555050505050565b600180546113849061322c565b80601f01602080910402602001604051908101604052809291908181526020018280546113b09061322c565b80156113fd5780601f106113d2576101008083540402835291602001916113fd565b820191906000526020600020905b8154815290600101906020018083116113e057829003601f168201915b505050505081565b60006114118484610ddb565b9050600060066000838152602001908152602001600020905060008160010160009054906101000a900463ffffffff1663ffffffff1611611487576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161147e906132a9565b60405180910390fd5b6001151581600401600c9054906101000a900460ff161515146114df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114d690613315565b60405180910390fd5b60008363ffffffff161015801561151557508060040160089054906101000a900463ffffffff1663ffffffff168363ffffffff16105b611554576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161154b90613381565b60405180910390fd5b8060040160009054906101000a900467ffffffffffffffff1667ffffffffffffffff16816006015461158691906125cd565b42116115c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115be90613413565b60405180910390fd5b428160060181905550828160070160006101000a81548163ffffffff021916908363ffffffff1602179055507f083b6024bc1dcbf2784878665777050c94a4eaceac2f9cb0688b8a93d25f49b38585428460040160009054906101000a900467ffffffffffffffff1667ffffffffffffffff164261164591906125cd565b87604051611657959493929190613433565b60405180910390a15050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080546116999061322c565b80601f01602080910402602001604051908101604052809291908181526020018280546116c59061322c565b80156117125780601f106116e757610100808354040283529160200191611712565b820191906000526020600020905b8154815290600101906020018083116116f557829003601f168201915b505050505081565b60035481565b6005818154811061173057600080fd5b906000526020600020016000915090505481565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146117d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117cd906134f8565b60405180910390fd5b60006117e28888610ddb565b9050600060066000838152602001908152602001600020905060008160010160009054906101000a900463ffffffff1663ffffffff1611611858576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161184f90612f1e565b60405180910390fd5b6001151581600401600c9054906101000a900460ff161515146118b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118a790612f8a565b60405180910390fd5b8060040160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1681600601546118e291906125cd565b4210611923576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161191a90613564565b60405180910390fd5b60008160070160009054906101000a900463ffffffff1690506000888860405161194e9291906135c3565b6040518091039020905060006119ad888880806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508c848663ffffffff16610e14565b905060011515811515146119f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119ed90613628565b60405180910390fd5b7f125690aeed72600ce0497b2ecc092d1b1b925f244d54906a195066af49c8b0b78c8c8660070160009054906101000a900463ffffffff1642604051611a3f9493929190613648565b60405180910390a16000846006018190555060008460070160006101000a81548163ffffffff021916908363ffffffff1602179055506001955050505050509695505050505050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b611aaf81611a9c565b8114611aba57600080fd5b50565b600081359050611acc81611aa6565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611afd82611ad2565b9050919050565b611b0d81611af2565b8114611b1857600080fd5b50565b600081359050611b2a81611b04565b92915050565b60008060408385031215611b4757611b46611a92565b5b6000611b5585828601611abd565b9250506020611b6685828601611b1b565b9150509250929050565b60028110611b7d57600080fd5b50565b600081359050611b8f81611b70565b92915050565b6000819050919050565b611ba881611b95565b8114611bb357600080fd5b50565b600081359050611bc581611b9f565b92915050565b600063ffffffff82169050919050565b611be481611bcb565b8114611bef57600080fd5b50565b600081359050611c0181611bdb565b92915050565b600067ffffffffffffffff82169050919050565b611c2481611c07565b8114611c2f57600080fd5b50565b600081359050611c4181611c1b565b92915050565b6000806000806000806000806000806101408b8d031215611c6b57611c6a611a92565b5b6000611c798d828e01611b80565b9a50506020611c8a8d828e01611b1b565b9950506040611c9b8d828e01611bb6565b9850506060611cac8d828e01611bf2565b9750506080611cbd8d828e01611abd565b96505060a0611cce8d828e01611abd565b95505060c0611cdf8d828e01611c32565b94505060e0611cf08d828e01611c32565b935050610100611d028d828e01611bf2565b925050610120611d148d828e01611abd565b9150509295989b9194979a5092959850565b60008060408385031215611d3d57611d3c611a92565b5b6000611d4b85828601611b1b565b9250506020611d5c85828601611bb6565b9150509250929050565b611d6f81611b95565b82525050565b6000602082019050611d8a6000830184611d66565b92915050565b611d9981611a9c565b82525050565b6000602082019050611db46000830184611d90565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611e0882611dbf565b810181811067ffffffffffffffff82111715611e2757611e26611dd0565b5b80604052505050565b6000611e3a611a88565b9050611e468282611dff565b919050565b600067ffffffffffffffff821115611e6657611e65611dd0565b5b602082029050602081019050919050565b600080fd5b6000611e8f611e8a84611e4b565b611e30565b90508083825260208201905060208402830185811115611eb257611eb1611e77565b5b835b81811015611edb5780611ec78882611bb6565b845260208401935050602081019050611eb4565b5050509392505050565b600082601f830112611efa57611ef9611dba565b5b8135611f0a848260208601611e7c565b91505092915050565b60008060008060808587031215611f2d57611f2c611a92565b5b600085013567ffffffffffffffff811115611f4b57611f4a611a97565b5b611f5787828801611ee5565b9450506020611f6887828801611bb6565b9350506040611f7987828801611bb6565b9250506060611f8a87828801611abd565b91505092959194509250565b60008115159050919050565b611fab81611f96565b82525050565b6000602082019050611fc66000830184611fa2565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612006578082015181840152602081019050611feb565b60008484015250505050565b600061201d82611fcc565b6120278185611fd7565b9350612037818560208601611fe8565b61204081611dbf565b840191505092915050565b600060208201905081810360008301526120658184612012565b905092915050565b60008060006060848603121561208657612085611a92565b5b600061209486828701611b1b565b93505060206120a586828701611bb6565b92505060406120b686828701611bf2565b9150509250925092565b6120c981611af2565b82525050565b60006020820190506120e460008301846120c0565b92915050565b600081519050919050565b600082825260208201905092915050565b6000612111826120ea565b61211b81856120f5565b935061212b818560208601611fe8565b61213481611dbf565b840191505092915050565b600060208201905081810360008301526121598184612106565b905092915050565b60006020828403121561217757612176611a92565b5b600061218584828501611abd565b91505092915050565b600080fd5b60008083601f8401126121a9576121a8611dba565b5b8235905067ffffffffffffffff8111156121c6576121c561218e565b5b6020830191508360018202830111156121e2576121e1611e77565b5b9250929050565b60008083601f8401126121ff576121fe611dba565b5b8235905067ffffffffffffffff81111561221c5761221b61218e565b5b60208301915083602082028301111561223857612237611e77565b5b9250929050565b6000806000806000806080878903121561225c5761225b611a92565b5b600061226a89828a01611b1b565b965050602061227b89828a01611bb6565b955050604087013567ffffffffffffffff81111561229c5761229b611a97565b5b6122a889828a01612193565b9450945050606087013567ffffffffffffffff8111156122cb576122ca611a97565b5b6122d789828a016121e9565b92509250509295509295509295565b7f6f6e6c79206f776e65722063616e207769746864726177000000000000000000600082015250565b600061231c601783611fd7565b9150612327826122e6565b602082019050919050565b6000602082019050818103600083015261234b8161230f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061238c82611a9c565b915061239783611a9c565b92508282039050818111156123af576123ae612352565b5b92915050565b7f696e737566666963656e7420626c6e6300000000000000000000000000000000600082015250565b60006123eb601083611fd7565b91506123f6826123b5565b602082019050919050565b6000602082019050818103600083015261241a816123de565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f6f6e6c79206f776e65722063616e20636f6e636c756465207478000000000000600082015250565b6000612486601a83611fd7565b915061249182612450565b602082019050919050565b600060208201905081810360008301526124b581612479565b9050919050565b600281106124cd576124cc612421565b5b50565b60008190506124de826124bc565b919050565b60006124ee826124d0565b9050919050565b6124fe816124e3565b82525050565b61250d81611bcb565b82525050565b61251c81611c07565b82525050565b600061016082019050612538600083018e6124f5565b612545602083018d6120c0565b612552604083018c611d66565b61255f606083018b612504565b61256c608083018a611d90565b61257960a0830189611d90565b61258660c0830188612513565b61259360e0830187612513565b6125a1610100830186612504565b6125af610120830185611d90565b6125bd610140830184611d66565b9c9b505050505050505050505050565b60006125d882611a9c565b91506125e383611a9c565b92508282019050808211156125fb576125fa612352565b5b92915050565b7f66696c6520616c72656164792073746f726564206f722077616974696e67206660008201527f6f7220636f6e636c7573696f6e00000000000000000000000000000000000000602082015250565b600061265d602d83611fd7565b915061266882612601565b604082019050919050565b6000602082019050818103600083015261268c81612650565b9050919050565b7f74696d6572456e64206d757374206265203e2063757272656e742074696d657360008201527f74616d7000000000000000000000000000000000000000000000000000000000602082015250565b60006126ef602483611fd7565b91506126fa82612693565b604082019050919050565b6000602082019050818103600083015261271e816126e2565b9050919050565b600061273082611a9c565b915061273b83611a9c565b925082820261274981611a9c565b915082820484148315176127605761275f612352565b5b5092915050565b7f696e73756666696369656e7420636f6c6c61746572616c000000000000000000600082015250565b600061279d601783611fd7565b91506127a882612767565b602082019050919050565b600060208201905081810360008301526127cc81612790565b9050919050565b7f6e6f207472616e73616374696f6e20656e74727920666f756e6420746f20636f60008201527f6e636c7564650000000000000000000000000000000000000000000000000000602082015250565b600061282f602683611fd7565b915061283a826127d3565b604082019050919050565b6000602082019050818103600083015261285e81612822565b9050919050565b7f726f6f74206d69736d6174636800000000000000000000000000000000000000600082015250565b600061289b600d83611fd7565b91506128a682612865565b602082019050919050565b600060208201905081810360008301526128ca8161288e565b9050919050565b7f73697a65206d69736d6174636800000000000000000000000000000000000000600082015250565b6000612907600d83611fd7565b9150612912826128d1565b602082019050919050565b60006020820190508181036000830152612936816128fa565b9050919050565b7f7365676d656e7473206d69736d61746368000000000000000000000000000000600082015250565b6000612973601183611fd7565b915061297e8261293d565b602082019050919050565b600060208201905081810360008301526129a281612966565b9050919050565b7f74696d65727374617274206d69736d6174636800000000000000000000000000600082015250565b60006129df601383611fd7565b91506129ea826129a9565b602082019050919050565b60006020820190508181036000830152612a0e816129d2565b9050919050565b7f74696d6572656e64206d69736d61746368000000000000000000000000000000600082015250565b6000612a4b601183611fd7565b9150612a5682612a15565b602082019050919050565b60006020820190508181036000830152612a7a81612a3e565b9050919050565b7f70726f766554696d656f7574206d69736d617463680000000000000000000000600082015250565b6000612ab7601583611fd7565b9150612ac282612a81565b602082019050919050565b60006020820190508181036000830152612ae681612aaa565b9050919050565b7f636f6e636c75646554696d656f75744c656e677468206d69736d617463680000600082015250565b6000612b23601e83611fd7565b9150612b2e82612aed565b602082019050919050565b60006020820190508181036000830152612b5281612b16565b9050919050565b7f62696420616d6f756e74206d69736d6174636800000000000000000000000000600082015250565b6000612b8f601383611fd7565b9150612b9a82612b59565b602082019050919050565b60006020820190508181036000830152612bbe81612b82565b9050919050565b7f7573657220636f6e636c7564656420616c726561647900000000000000000000600082015250565b6000612bfb601683611fd7565b9150612c0682612bc5565b602082019050919050565b60006020820190508181036000830152612c2a81612bee565b9050919050565b7f616d6f756e74206d757374206265203e3d20626964416d6f756e740000000000600082015250565b6000612c67601b83611fd7565b9150612c7282612c31565b602082019050919050565b60006020820190508181036000830152612c9681612c5a565b9050919050565b7f636f6e636c7564652054696d6564206f75740000000000000000000000000000600082015250565b6000612cd3601283611fd7565b9150612cde82612c9d565b602082019050919050565b60006020820190508181036000830152612d0281612cc6565b9050919050565b60008160601b9050919050565b6000612d2182612d09565b9050919050565b6000612d3382612d16565b9050919050565b612d4b612d4682611af2565b612d28565b82525050565b6000819050919050565b612d6c612d6782611b95565b612d51565b82525050565b6000612d7e8285612d3a565b601482019150612d8e8284612d5b565b6020820191508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612e0782611a9c565b9150612e1283611a9c565b925082612e2257612e21612dcd565b5b828206905092915050565b6000612e398285612d5b565b602082019150612e498284612d5b565b6020820191508190509392505050565b6000612e6482611a9c565b9150612e6f83611a9c565b925082612e7f57612e7e612dcd565b5b828204905092915050565b6000612e9582611a9c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612ec757612ec6612352565b5b600182019050919050565b7f696e76616c696420747800000000000000000000000000000000000000000000600082015250565b6000612f08600a83611fd7565b9150612f1382612ed2565b602082019050919050565b60006020820190508181036000830152612f3781612efb565b9050919050565b7f7478206e6f7420636f6e636c7564656400000000000000000000000000000000600082015250565b6000612f74601083611fd7565b9150612f7f82612f3e565b602082019050919050565b60006020820190508181036000830152612fa381612f67565b9050919050565b7f76616c69646174696f6e206e6f74207374617274656400000000000000000000600082015250565b6000612fe0601683611fd7565b9150612feb82612faa565b602082019050919050565b6000602082019050818103600083015261300f81612fd3565b9050919050565b7f76616c69646174696f6e2077696e646f77206e6f742065787069726564000000600082015250565b600061304c601d83611fd7565b915061305782613016565b602082019050919050565b6000602082019050818103600083015261307b8161303f565b9050919050565b600060608201905061309760008301866120c0565b6130a46020830185611d66565b6130b16040830184611d90565b949350505050565b7f6f6e6c79206f776e65722063616e2066696e6973682074780000000000000000600082015250565b60006130ef601883611fd7565b91506130fa826130b9565b602082019050919050565b6000602082019050818103600083015261311e816130e2565b9050919050565b7f696e76616c6964206f7072000000000000000000000000000000000000000000600082015250565b600061315b600b83611fd7565b915061316682613125565b602082019050919050565b6000602082019050818103600083015261318a8161314e565b9050919050565b7f6e6f742065787069726564000000000000000000000000000000000000000000600082015250565b60006131c7600b83611fd7565b91506131d282613191565b602082019050919050565b600060208201905081810360008301526131f6816131ba565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061324457607f821691505b602082108103613257576132566131fd565b5b50919050565b7f6d617070696e6720646f65736e27742065786973747300000000000000000000600082015250565b6000613293601683611fd7565b915061329e8261325d565b602082019050919050565b600060208201905081810360008301526132c281613286565b9050919050565b7f75736572206861736e277420636f6e636c756465640000000000000000000000600082015250565b60006132ff601583611fd7565b915061330a826132c9565b602082019050919050565b6000602082019050818103600083015261332e816132f2565b9050919050565b7f696e76616c6964207365676d656e74496e646578000000000000000000000000600082015250565b600061336b601483611fd7565b915061337682613335565b602082019050919050565b6000602082019050818103600083015261339a8161335e565b9050919050565b7f76616c69646174696f6e20697320616c726561647920696e2070726f6772657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b60006133fd602183611fd7565b9150613408826133a1565b604082019050919050565b6000602082019050818103600083015261342c816133f0565b9050919050565b600060a08201905061344860008301886120c0565b6134556020830187611d66565b6134626040830186611d90565b61346f6060830185611d90565b61347c6080830184612504565b9695505050505050565b7f6f6e6c79206f776e65722063616e2070726f636573732076616c69646174696f60008201527f6e00000000000000000000000000000000000000000000000000000000000000602082015250565b60006134e2602183611fd7565b91506134ed82613486565b604082019050919050565b60006020820190508181036000830152613511816134d5565b9050919050565b7f76616c69646174696f6e2077696e646f77206578706972656400000000000000600082015250565b600061354e601983611fd7565b915061355982613518565b602082019050919050565b6000602082019050818103600083015261357d81613541565b9050919050565b600081905092915050565b82818337600083830152505050565b60006135aa8385613584565b93506135b783858461358f565b82840190509392505050565b60006135d082848661359e565b91508190509392505050565b7f696e76616c69642070726f6f6600000000000000000000000000000000000000600082015250565b6000613612600d83611fd7565b915061361d826135dc565b602082019050919050565b6000602082019050818103600083015261364181613605565b9050919050565b600060808201905061365d60008301876120c0565b61366a6020830186611d66565b6136776040830185612504565b6136846060830184611d90565b9594505050505056fea2646970667358221220fc1c7d3eae467ae26cce9603a7f0d97e64af7a87506ec6ecd746c485a687da7964736f6c63430008110033",
}

// StorageNodeContractABI is the input ABI used to generate the binding from.
// Deprecated: Use StorageNodeContractMetaData.ABI instead.
var StorageNodeContractABI = StorageNodeContractMetaData.ABI

// StorageNodeContractBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StorageNodeContractMetaData.Bin instead.
var StorageNodeContractBin = StorageNodeContractMetaData.Bin

// DeployStorageNodeContract deploys a new Ethereum contract, binding an instance of StorageNodeContract to it.
func DeployStorageNodeContract(auth *bind.TransactOpts, backend bind.ContractBackend, _TLSCert []byte, _HOST string, _owner common.Address) (common.Address, *types.Transaction, *StorageNodeContract, error) {
	parsed, err := StorageNodeContractMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(StorageNodeContractBin), backend, _TLSCert, _HOST, _owner)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &StorageNodeContract{StorageNodeContractCaller: StorageNodeContractCaller{contract: contract}, StorageNodeContractTransactor: StorageNodeContractTransactor{contract: contract}, StorageNodeContractFilterer: StorageNodeContractFilterer{contract: contract}}, nil
}

// StorageNodeContract is an auto generated Go binding around an Ethereum contract.
type StorageNodeContract struct {
	StorageNodeContractCaller     // Read-only binding to the contract
	StorageNodeContractTransactor // Write-only binding to the contract
	StorageNodeContractFilterer   // Log filterer for contract events
}

// StorageNodeContractCaller is an auto generated read-only Go binding around an Ethereum contract.
type StorageNodeContractCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StorageNodeContractTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StorageNodeContractTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StorageNodeContractFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StorageNodeContractFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StorageNodeContractSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StorageNodeContractSession struct {
	Contract     *StorageNodeContract // Generic contract binding to set the session for
	CallOpts     bind.CallOpts        // Call options to use throughout this session
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// StorageNodeContractCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StorageNodeContractCallerSession struct {
	Contract *StorageNodeContractCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts              // Call options to use throughout this session
}

// StorageNodeContractTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StorageNodeContractTransactorSession struct {
	Contract     *StorageNodeContractTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts              // Transaction auth options to use throughout this session
}

// StorageNodeContractRaw is an auto generated low-level Go binding around an Ethereum contract.
type StorageNodeContractRaw struct {
	Contract *StorageNodeContract // Generic contract binding to access the raw methods on
}

// StorageNodeContractCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StorageNodeContractCallerRaw struct {
	Contract *StorageNodeContractCaller // Generic read-only contract binding to access the raw methods on
}

// StorageNodeContractTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StorageNodeContractTransactorRaw struct {
	Contract *StorageNodeContractTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStorageNodeContract creates a new instance of StorageNodeContract, bound to a specific deployed contract.
func NewStorageNodeContract(address common.Address, backend bind.ContractBackend) (*StorageNodeContract, error) {
	contract, err := bindStorageNodeContract(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &StorageNodeContract{StorageNodeContractCaller: StorageNodeContractCaller{contract: contract}, StorageNodeContractTransactor: StorageNodeContractTransactor{contract: contract}, StorageNodeContractFilterer: StorageNodeContractFilterer{contract: contract}}, nil
}

// NewStorageNodeContractCaller creates a new read-only instance of StorageNodeContract, bound to a specific deployed contract.
func NewStorageNodeContractCaller(address common.Address, caller bind.ContractCaller) (*StorageNodeContractCaller, error) {
	contract, err := bindStorageNodeContract(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StorageNodeContractCaller{contract: contract}, nil
}

// NewStorageNodeContractTransactor creates a new write-only instance of StorageNodeContract, bound to a specific deployed contract.
func NewStorageNodeContractTransactor(address common.Address, transactor bind.ContractTransactor) (*StorageNodeContractTransactor, error) {
	contract, err := bindStorageNodeContract(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StorageNodeContractTransactor{contract: contract}, nil
}

// NewStorageNodeContractFilterer creates a new log filterer instance of StorageNodeContract, bound to a specific deployed contract.
func NewStorageNodeContractFilterer(address common.Address, filterer bind.ContractFilterer) (*StorageNodeContractFilterer, error) {
	contract, err := bindStorageNodeContract(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StorageNodeContractFilterer{contract: contract}, nil
}

// bindStorageNodeContract binds a generic wrapper to an already deployed contract.
func bindStorageNodeContract(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StorageNodeContractABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StorageNodeContract *StorageNodeContractRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StorageNodeContract.Contract.StorageNodeContractCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StorageNodeContract *StorageNodeContractRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StorageNodeContract.Contract.StorageNodeContractTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StorageNodeContract *StorageNodeContractRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StorageNodeContract.Contract.StorageNodeContractTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StorageNodeContract *StorageNodeContractCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StorageNodeContract.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StorageNodeContract *StorageNodeContractTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StorageNodeContract.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StorageNodeContract *StorageNodeContractTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StorageNodeContract.Contract.contract.Transact(opts, method, params...)
}

// HOST is a free data retrieval call binding the contract method 0x49f289dc.
//
// Solidity: function HOST() view returns(string)
func (_StorageNodeContract *StorageNodeContractCaller) HOST(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _StorageNodeContract.contract.Call(opts, &out, "HOST")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// HOST is a free data retrieval call binding the contract method 0x49f289dc.
//
// Solidity: function HOST() view returns(string)
func (_StorageNodeContract *StorageNodeContractSession) HOST() (string, error) {
	return _StorageNodeContract.Contract.HOST(&_StorageNodeContract.CallOpts)
}

// HOST is a free data retrieval call binding the contract method 0x49f289dc.
//
// Solidity: function HOST() view returns(string)
func (_StorageNodeContract *StorageNodeContractCallerSession) HOST() (string, error) {
	return _StorageNodeContract.Contract.HOST(&_StorageNodeContract.CallOpts)
}

// TLSCert is a free data retrieval call binding the contract method 0xb3752fa3.
//
// Solidity: function TLSCert() view returns(bytes)
func (_StorageNodeContract *StorageNodeContractCaller) TLSCert(opts *bind.CallOpts) ([]byte, error) {
	var out []interface{}
	err := _StorageNodeContract.contract.Call(opts, &out, "TLSCert")

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// TLSCert is a free data retrieval call binding the contract method 0xb3752fa3.
//
// Solidity: function TLSCert() view returns(bytes)
func (_StorageNodeContract *StorageNodeContractSession) TLSCert() ([]byte, error) {
	return _StorageNodeContract.Contract.TLSCert(&_StorageNodeContract.CallOpts)
}

// TLSCert is a free data retrieval call binding the contract method 0xb3752fa3.
//
// Solidity: function TLSCert() view returns(bytes)
func (_StorageNodeContract *StorageNodeContractCallerSession) TLSCert() ([]byte, error) {
	return _StorageNodeContract.Contract.TLSCert(&_StorageNodeContract.CallOpts)
}

// ComputeKey is a free data retrieval call binding the contract method 0x0568b4d7.
//
// Solidity: function computeKey(address userAddress, bytes32 merkleRootHash) pure returns(bytes32)
func (_StorageNodeContract *StorageNodeContractCaller) ComputeKey(opts *bind.CallOpts, userAddress common.Address, merkleRootHash [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _StorageNodeContract.contract.Call(opts, &out, "computeKey", userAddress, merkleRootHash)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ComputeKey is a free data retrieval call binding the contract method 0x0568b4d7.
//
// Solidity: function computeKey(address userAddress, bytes32 merkleRootHash) pure returns(bytes32)
func (_StorageNodeContract *StorageNodeContractSession) ComputeKey(userAddress common.Address, merkleRootHash [32]byte) ([32]byte, error) {
	return _StorageNodeContract.Contract.ComputeKey(&_StorageNodeContract.CallOpts, userAddress, merkleRootHash)
}

// ComputeKey is a free data retrieval call binding the contract method 0x0568b4d7.
//
// Solidity: function computeKey(address userAddress, bytes32 merkleRootHash) pure returns(bytes32)
func (_StorageNodeContract *StorageNodeContractCallerSession) ComputeKey(userAddress common.Address, merkleRootHash [32]byte) ([32]byte, error) {
	return _StorageNodeContract.Contract.ComputeKey(&_StorageNodeContract.CallOpts, userAddress, merkleRootHash)
}

// LockedCollateral is a free data retrieval call binding the contract method 0xb952cc4a.
//
// Solidity: function lockedCollateral() view returns(uint256)
func (_StorageNodeContract *StorageNodeContractCaller) LockedCollateral(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StorageNodeContract.contract.Call(opts, &out, "lockedCollateral")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LockedCollateral is a free data retrieval call binding the contract method 0xb952cc4a.
//
// Solidity: function lockedCollateral() view returns(uint256)
func (_StorageNodeContract *StorageNodeContractSession) LockedCollateral() (*big.Int, error) {
	return _StorageNodeContract.Contract.LockedCollateral(&_StorageNodeContract.CallOpts)
}

// LockedCollateral is a free data retrieval call binding the contract method 0xb952cc4a.
//
// Solidity: function lockedCollateral() view returns(uint256)
func (_StorageNodeContract *StorageNodeContractCallerSession) LockedCollateral() (*big.Int, error) {
	return _StorageNodeContract.Contract.LockedCollateral(&_StorageNodeContract.CallOpts)
}

// MappingLength is a free data retrieval call binding the contract method 0x116766a6.
//
// Solidity: function mappingLength() view returns(uint256)
func (_StorageNodeContract *StorageNodeContractCaller) MappingLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StorageNodeContract.contract.Call(opts, &out, "mappingLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MappingLength is a free data retrieval call binding the contract method 0x116766a6.
//
// Solidity: function mappingLength() view returns(uint256)
func (_StorageNodeContract *StorageNodeContractSession) MappingLength() (*big.Int, error) {
	return _StorageNodeContract.Contract.MappingLength(&_StorageNodeContract.CallOpts)
}

// MappingLength is a free data retrieval call binding the contract method 0x116766a6.
//
// Solidity: function mappingLength() view returns(uint256)
func (_StorageNodeContract *StorageNodeContractCallerSession) MappingLength() (*big.Int, error) {
	return _StorageNodeContract.Contract.MappingLength(&_StorageNodeContract.CallOpts)
}

// MappingsList is a free data retrieval call binding the contract method 0xca88afbc.
//
// Solidity: function mappingsList(uint256 ) view returns(bytes32)
func (_StorageNodeContract *StorageNodeContractCaller) MappingsList(opts *bind.CallOpts, arg0 *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _StorageNodeContract.contract.Call(opts, &out, "mappingsList", arg0)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// MappingsList is a free data retrieval call binding the contract method 0xca88afbc.
//
// Solidity: function mappingsList(uint256 ) view returns(bytes32)
func (_StorageNodeContract *StorageNodeContractSession) MappingsList(arg0 *big.Int) ([32]byte, error) {
	return _StorageNodeContract.Contract.MappingsList(&_StorageNodeContract.CallOpts, arg0)
}

// MappingsList is a free data retrieval call binding the contract method 0xca88afbc.
//
// Solidity: function mappingsList(uint256 ) view returns(bytes32)
func (_StorageNodeContract *StorageNodeContractCallerSession) MappingsList(arg0 *big.Int) ([32]byte, error) {
	return _StorageNodeContract.Contract.MappingsList(&_StorageNodeContract.CallOpts, arg0)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_StorageNodeContract *StorageNodeContractCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _StorageNodeContract.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_StorageNodeContract *StorageNodeContractSession) Owner() (common.Address, error) {
	return _StorageNodeContract.Contract.Owner(&_StorageNodeContract.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_StorageNodeContract *StorageNodeContractCallerSession) Owner() (common.Address, error) {
	return _StorageNodeContract.Contract.Owner(&_StorageNodeContract.CallOpts)
}

// Verify is a free data retrieval call binding the contract method 0x21fb335c.
//
// Solidity: function verify(bytes32[] proof, bytes32 root, bytes32 leaf, uint256 index) pure returns(bool)
func (_StorageNodeContract *StorageNodeContractCaller) Verify(opts *bind.CallOpts, proof [][32]byte, root [32]byte, leaf [32]byte, index *big.Int) (bool, error) {
	var out []interface{}
	err := _StorageNodeContract.contract.Call(opts, &out, "verify", proof, root, leaf, index)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Verify is a free data retrieval call binding the contract method 0x21fb335c.
//
// Solidity: function verify(bytes32[] proof, bytes32 root, bytes32 leaf, uint256 index) pure returns(bool)
func (_StorageNodeContract *StorageNodeContractSession) Verify(proof [][32]byte, root [32]byte, leaf [32]byte, index *big.Int) (bool, error) {
	return _StorageNodeContract.Contract.Verify(&_StorageNodeContract.CallOpts, proof, root, leaf, index)
}

// Verify is a free data retrieval call binding the contract method 0x21fb335c.
//
// Solidity: function verify(bytes32[] proof, bytes32 root, bytes32 leaf, uint256 index) pure returns(bool)
func (_StorageNodeContract *StorageNodeContractCallerSession) Verify(proof [][32]byte, root [32]byte, leaf [32]byte, index *big.Int) (bool, error) {
	return _StorageNodeContract.Contract.Verify(&_StorageNodeContract.CallOpts, proof, root, leaf, index)
}

// ConcludeTransaction is a paid mutator transaction binding the contract method 0x02d12776.
//
// Solidity: function concludeTransaction(uint8 callerType, address userAddress, bytes32 merkleRootHash, uint32 fileSize, uint256 timerStart, uint256 timerEnd, uint64 proveTimeoutLength, uint64 concludeTimeoutLength, uint32 segmentsCount, uint256 bidAmount) payable returns()
func (_StorageNodeContract *StorageNodeContractTransactor) ConcludeTransaction(opts *bind.TransactOpts, callerType uint8, userAddress common.Address, merkleRootHash [32]byte, fileSize uint32, timerStart *big.Int, timerEnd *big.Int, proveTimeoutLength uint64, concludeTimeoutLength uint64, segmentsCount uint32, bidAmount *big.Int) (*types.Transaction, error) {
	return _StorageNodeContract.contract.Transact(opts, "concludeTransaction", callerType, userAddress, merkleRootHash, fileSize, timerStart, timerEnd, proveTimeoutLength, concludeTimeoutLength, segmentsCount, bidAmount)
}

// ConcludeTransaction is a paid mutator transaction binding the contract method 0x02d12776.
//
// Solidity: function concludeTransaction(uint8 callerType, address userAddress, bytes32 merkleRootHash, uint32 fileSize, uint256 timerStart, uint256 timerEnd, uint64 proveTimeoutLength, uint64 concludeTimeoutLength, uint32 segmentsCount, uint256 bidAmount) payable returns()
func (_StorageNodeContract *StorageNodeContractSession) ConcludeTransaction(callerType uint8, userAddress common.Address, merkleRootHash [32]byte, fileSize uint32, timerStart *big.Int, timerEnd *big.Int, proveTimeoutLength uint64, concludeTimeoutLength uint64, segmentsCount uint32, bidAmount *big.Int) (*types.Transaction, error) {
	return _StorageNodeContract.Contract.ConcludeTransaction(&_StorageNodeContract.TransactOpts, callerType, userAddress, merkleRootHash, fileSize, timerStart, timerEnd, proveTimeoutLength, concludeTimeoutLength, segmentsCount, bidAmount)
}

// ConcludeTransaction is a paid mutator transaction binding the contract method 0x02d12776.
//
// Solidity: function concludeTransaction(uint8 callerType, address userAddress, bytes32 merkleRootHash, uint32 fileSize, uint256 timerStart, uint256 timerEnd, uint64 proveTimeoutLength, uint64 concludeTimeoutLength, uint32 segmentsCount, uint256 bidAmount) payable returns()
func (_StorageNodeContract *StorageNodeContractTransactorSession) ConcludeTransaction(callerType uint8, userAddress common.Address, merkleRootHash [32]byte, fileSize uint32, timerStart *big.Int, timerEnd *big.Int, proveTimeoutLength uint64, concludeTimeoutLength uint64, segmentsCount uint32, bidAmount *big.Int) (*types.Transaction, error) {
	return _StorageNodeContract.Contract.ConcludeTransaction(&_StorageNodeContract.TransactOpts, callerType, userAddress, merkleRootHash, fileSize, timerStart, timerEnd, proveTimeoutLength, concludeTimeoutLength, segmentsCount, bidAmount)
}

// FinishTransaction is a paid mutator transaction binding the contract method 0x438eb46e.
//
// Solidity: function finishTransaction(address userAddress, bytes32 merkleRootHash) returns()
func (_StorageNodeContract *StorageNodeContractTransactor) FinishTransaction(opts *bind.TransactOpts, userAddress common.Address, merkleRootHash [32]byte) (*types.Transaction, error) {
	return _StorageNodeContract.contract.Transact(opts, "finishTransaction", userAddress, merkleRootHash)
}

// FinishTransaction is a paid mutator transaction binding the contract method 0x438eb46e.
//
// Solidity: function finishTransaction(address userAddress, bytes32 merkleRootHash) returns()
func (_StorageNodeContract *StorageNodeContractSession) FinishTransaction(userAddress common.Address, merkleRootHash [32]byte) (*types.Transaction, error) {
	return _StorageNodeContract.Contract.FinishTransaction(&_StorageNodeContract.TransactOpts, userAddress, merkleRootHash)
}

// FinishTransaction is a paid mutator transaction binding the contract method 0x438eb46e.
//
// Solidity: function finishTransaction(address userAddress, bytes32 merkleRootHash) returns()
func (_StorageNodeContract *StorageNodeContractTransactorSession) FinishTransaction(userAddress common.Address, merkleRootHash [32]byte) (*types.Transaction, error) {
	return _StorageNodeContract.Contract.FinishTransaction(&_StorageNodeContract.TransactOpts, userAddress, merkleRootHash)
}

// ProcessValidation is a paid mutator transaction binding the contract method 0xe172c5cb.
//
// Solidity: function processValidation(address userAddress, bytes32 rootHash, bytes data, bytes32[] proof) returns(bool)
func (_StorageNodeContract *StorageNodeContractTransactor) ProcessValidation(opts *bind.TransactOpts, userAddress common.Address, rootHash [32]byte, data []byte, proof [][32]byte) (*types.Transaction, error) {
	return _StorageNodeContract.contract.Transact(opts, "processValidation", userAddress, rootHash, data, proof)
}

// ProcessValidation is a paid mutator transaction binding the contract method 0xe172c5cb.
//
// Solidity: function processValidation(address userAddress, bytes32 rootHash, bytes data, bytes32[] proof) returns(bool)
func (_StorageNodeContract *StorageNodeContractSession) ProcessValidation(userAddress common.Address, rootHash [32]byte, data []byte, proof [][32]byte) (*types.Transaction, error) {
	return _StorageNodeContract.Contract.ProcessValidation(&_StorageNodeContract.TransactOpts, userAddress, rootHash, data, proof)
}

// ProcessValidation is a paid mutator transaction binding the contract method 0xe172c5cb.
//
// Solidity: function processValidation(address userAddress, bytes32 rootHash, bytes data, bytes32[] proof) returns(bool)
func (_StorageNodeContract *StorageNodeContractTransactorSession) ProcessValidation(userAddress common.Address, rootHash [32]byte, data []byte, proof [][32]byte) (*types.Transaction, error) {
	return _StorageNodeContract.Contract.ProcessValidation(&_StorageNodeContract.TransactOpts, userAddress, rootHash, data, proof)
}

// ValidateStorage is a paid mutator transaction binding the contract method 0x5d206fda.
//
// Solidity: function validateStorage(address userAddress, bytes32 fileRootHash, uint32 segmentIndex) returns()
func (_StorageNodeContract *StorageNodeContractTransactor) ValidateStorage(opts *bind.TransactOpts, userAddress common.Address, fileRootHash [32]byte, segmentIndex uint32) (*types.Transaction, error) {
	return _StorageNodeContract.contract.Transact(opts, "validateStorage", userAddress, fileRootHash, segmentIndex)
}

// ValidateStorage is a paid mutator transaction binding the contract method 0x5d206fda.
//
// Solidity: function validateStorage(address userAddress, bytes32 fileRootHash, uint32 segmentIndex) returns()
func (_StorageNodeContract *StorageNodeContractSession) ValidateStorage(userAddress common.Address, fileRootHash [32]byte, segmentIndex uint32) (*types.Transaction, error) {
	return _StorageNodeContract.Contract.ValidateStorage(&_StorageNodeContract.TransactOpts, userAddress, fileRootHash, segmentIndex)
}

// ValidateStorage is a paid mutator transaction binding the contract method 0x5d206fda.
//
// Solidity: function validateStorage(address userAddress, bytes32 fileRootHash, uint32 segmentIndex) returns()
func (_StorageNodeContract *StorageNodeContractTransactorSession) ValidateStorage(userAddress common.Address, fileRootHash [32]byte, segmentIndex uint32) (*types.Transaction, error) {
	return _StorageNodeContract.Contract.ValidateStorage(&_StorageNodeContract.TransactOpts, userAddress, fileRootHash, segmentIndex)
}

// ValidationExpired is a paid mutator transaction binding the contract method 0x22f44022.
//
// Solidity: function validationExpired(address userAddress, bytes32 rootHash) returns()
func (_StorageNodeContract *StorageNodeContractTransactor) ValidationExpired(opts *bind.TransactOpts, userAddress common.Address, rootHash [32]byte) (*types.Transaction, error) {
	return _StorageNodeContract.contract.Transact(opts, "validationExpired", userAddress, rootHash)
}

// ValidationExpired is a paid mutator transaction binding the contract method 0x22f44022.
//
// Solidity: function validationExpired(address userAddress, bytes32 rootHash) returns()
func (_StorageNodeContract *StorageNodeContractSession) ValidationExpired(userAddress common.Address, rootHash [32]byte) (*types.Transaction, error) {
	return _StorageNodeContract.Contract.ValidationExpired(&_StorageNodeContract.TransactOpts, userAddress, rootHash)
}

// ValidationExpired is a paid mutator transaction binding the contract method 0x22f44022.
//
// Solidity: function validationExpired(address userAddress, bytes32 rootHash) returns()
func (_StorageNodeContract *StorageNodeContractTransactorSession) ValidationExpired(userAddress common.Address, rootHash [32]byte) (*types.Transaction, error) {
	return _StorageNodeContract.Contract.ValidationExpired(&_StorageNodeContract.TransactOpts, userAddress, rootHash)
}

// Withdraw is a paid mutator transaction binding the contract method 0x00f714ce.
//
// Solidity: function withdraw(uint256 amount, address target) returns()
func (_StorageNodeContract *StorageNodeContractTransactor) Withdraw(opts *bind.TransactOpts, amount *big.Int, target common.Address) (*types.Transaction, error) {
	return _StorageNodeContract.contract.Transact(opts, "withdraw", amount, target)
}

// Withdraw is a paid mutator transaction binding the contract method 0x00f714ce.
//
// Solidity: function withdraw(uint256 amount, address target) returns()
func (_StorageNodeContract *StorageNodeContractSession) Withdraw(amount *big.Int, target common.Address) (*types.Transaction, error) {
	return _StorageNodeContract.Contract.Withdraw(&_StorageNodeContract.TransactOpts, amount, target)
}

// Withdraw is a paid mutator transaction binding the contract method 0x00f714ce.
//
// Solidity: function withdraw(uint256 amount, address target) returns()
func (_StorageNodeContract *StorageNodeContractTransactorSession) Withdraw(amount *big.Int, target common.Address) (*types.Transaction, error) {
	return _StorageNodeContract.Contract.Withdraw(&_StorageNodeContract.TransactOpts, amount, target)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_StorageNodeContract *StorageNodeContractTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StorageNodeContract.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_StorageNodeContract *StorageNodeContractSession) Receive() (*types.Transaction, error) {
	return _StorageNodeContract.Contract.Receive(&_StorageNodeContract.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_StorageNodeContract *StorageNodeContractTransactorSession) Receive() (*types.Transaction, error) {
	return _StorageNodeContract.Contract.Receive(&_StorageNodeContract.TransactOpts)
}

// StorageNodeContractEvProveStorageIterator is returned from FilterEvProveStorage and is used to iterate over the raw logs and unpacked data for EvProveStorage events raised by the StorageNodeContract contract.
type StorageNodeContractEvProveStorageIterator struct {
	Event *StorageNodeContractEvProveStorage // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StorageNodeContractEvProveStorageIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StorageNodeContractEvProveStorage)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StorageNodeContractEvProveStorage)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StorageNodeContractEvProveStorageIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StorageNodeContractEvProveStorageIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StorageNodeContractEvProveStorage represents a EvProveStorage event raised by the StorageNodeContract contract.
type StorageNodeContractEvProveStorage struct {
	UserAddress        common.Address
	FileMerkleRootHash [32]byte
	Timestamp          *big.Int
	ExpiryTimestamp    *big.Int
	SegmentIndex       uint32
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterEvProveStorage is a free log retrieval operation binding the contract event 0x083b6024bc1dcbf2784878665777050c94a4eaceac2f9cb0688b8a93d25f49b3.
//
// Solidity: event EvProveStorage(address userAddress, bytes32 fileMerkleRootHash, uint256 timestamp, uint256 expiryTimestamp, uint32 segmentIndex)
func (_StorageNodeContract *StorageNodeContractFilterer) FilterEvProveStorage(opts *bind.FilterOpts) (*StorageNodeContractEvProveStorageIterator, error) {

	logs, sub, err := _StorageNodeContract.contract.FilterLogs(opts, "EvProveStorage")
	if err != nil {
		return nil, err
	}
	return &StorageNodeContractEvProveStorageIterator{contract: _StorageNodeContract.contract, event: "EvProveStorage", logs: logs, sub: sub}, nil
}

// WatchEvProveStorage is a free log subscription operation binding the contract event 0x083b6024bc1dcbf2784878665777050c94a4eaceac2f9cb0688b8a93d25f49b3.
//
// Solidity: event EvProveStorage(address userAddress, bytes32 fileMerkleRootHash, uint256 timestamp, uint256 expiryTimestamp, uint32 segmentIndex)
func (_StorageNodeContract *StorageNodeContractFilterer) WatchEvProveStorage(opts *bind.WatchOpts, sink chan<- *StorageNodeContractEvProveStorage) (event.Subscription, error) {

	logs, sub, err := _StorageNodeContract.contract.WatchLogs(opts, "EvProveStorage")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StorageNodeContractEvProveStorage)
				if err := _StorageNodeContract.contract.UnpackLog(event, "EvProveStorage", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEvProveStorage is a log parse operation binding the contract event 0x083b6024bc1dcbf2784878665777050c94a4eaceac2f9cb0688b8a93d25f49b3.
//
// Solidity: event EvProveStorage(address userAddress, bytes32 fileMerkleRootHash, uint256 timestamp, uint256 expiryTimestamp, uint32 segmentIndex)
func (_StorageNodeContract *StorageNodeContractFilterer) ParseEvProveStorage(log types.Log) (*StorageNodeContractEvProveStorage, error) {
	event := new(StorageNodeContractEvProveStorage)
	if err := _StorageNodeContract.contract.UnpackLog(event, "EvProveStorage", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StorageNodeContractEvTxConcludeIterator is returned from FilterEvTxConclude and is used to iterate over the raw logs and unpacked data for EvTxConclude events raised by the StorageNodeContract contract.
type StorageNodeContractEvTxConcludeIterator struct {
	Event *StorageNodeContractEvTxConclude // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StorageNodeContractEvTxConcludeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StorageNodeContractEvTxConclude)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StorageNodeContractEvTxConclude)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StorageNodeContractEvTxConcludeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StorageNodeContractEvTxConcludeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StorageNodeContractEvTxConclude represents a EvTxConclude event raised by the StorageNodeContract contract.
type StorageNodeContractEvTxConclude struct {
	Caller                uint8
	UserAddress           common.Address
	MerkleRootHash        [32]byte
	FileSize              uint32
	TimerStart            *big.Int
	TimerEnd              *big.Int
	ProveTimeoutLength    uint64
	ConcludeTimeoutLength uint64
	SegmentsCount         uint32
	BidAmount             *big.Int
	ComputedKey           [32]byte
	Raw                   types.Log // Blockchain specific contextual infos
}

// FilterEvTxConclude is a free log retrieval operation binding the contract event 0xde729c542d0fb1cd20ede760929f2a44110cc6bf302ceb404ba199b749e9633b.
//
// Solidity: event EvTxConclude(uint8 caller, address userAddress, bytes32 merkleRootHash, uint32 fileSize, uint256 timerStart, uint256 timerEnd, uint64 proveTimeoutLength, uint64 concludeTimeoutLength, uint32 segmentsCount, uint256 bidAmount, bytes32 computedKey)
func (_StorageNodeContract *StorageNodeContractFilterer) FilterEvTxConclude(opts *bind.FilterOpts) (*StorageNodeContractEvTxConcludeIterator, error) {

	logs, sub, err := _StorageNodeContract.contract.FilterLogs(opts, "EvTxConclude")
	if err != nil {
		return nil, err
	}
	return &StorageNodeContractEvTxConcludeIterator{contract: _StorageNodeContract.contract, event: "EvTxConclude", logs: logs, sub: sub}, nil
}

// WatchEvTxConclude is a free log subscription operation binding the contract event 0xde729c542d0fb1cd20ede760929f2a44110cc6bf302ceb404ba199b749e9633b.
//
// Solidity: event EvTxConclude(uint8 caller, address userAddress, bytes32 merkleRootHash, uint32 fileSize, uint256 timerStart, uint256 timerEnd, uint64 proveTimeoutLength, uint64 concludeTimeoutLength, uint32 segmentsCount, uint256 bidAmount, bytes32 computedKey)
func (_StorageNodeContract *StorageNodeContractFilterer) WatchEvTxConclude(opts *bind.WatchOpts, sink chan<- *StorageNodeContractEvTxConclude) (event.Subscription, error) {

	logs, sub, err := _StorageNodeContract.contract.WatchLogs(opts, "EvTxConclude")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StorageNodeContractEvTxConclude)
				if err := _StorageNodeContract.contract.UnpackLog(event, "EvTxConclude", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEvTxConclude is a log parse operation binding the contract event 0xde729c542d0fb1cd20ede760929f2a44110cc6bf302ceb404ba199b749e9633b.
//
// Solidity: event EvTxConclude(uint8 caller, address userAddress, bytes32 merkleRootHash, uint32 fileSize, uint256 timerStart, uint256 timerEnd, uint64 proveTimeoutLength, uint64 concludeTimeoutLength, uint32 segmentsCount, uint256 bidAmount, bytes32 computedKey)
func (_StorageNodeContract *StorageNodeContractFilterer) ParseEvTxConclude(log types.Log) (*StorageNodeContractEvTxConclude, error) {
	event := new(StorageNodeContractEvTxConclude)
	if err := _StorageNodeContract.contract.UnpackLog(event, "EvTxConclude", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StorageNodeContractEvValidationExpiredIterator is returned from FilterEvValidationExpired and is used to iterate over the raw logs and unpacked data for EvValidationExpired events raised by the StorageNodeContract contract.
type StorageNodeContractEvValidationExpiredIterator struct {
	Event *StorageNodeContractEvValidationExpired // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StorageNodeContractEvValidationExpiredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StorageNodeContractEvValidationExpired)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StorageNodeContractEvValidationExpired)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StorageNodeContractEvValidationExpiredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StorageNodeContractEvValidationExpiredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StorageNodeContractEvValidationExpired represents a EvValidationExpired event raised by the StorageNodeContract contract.
type StorageNodeContractEvValidationExpired struct {
	UserAddress        common.Address
	FileMerkleRootHash [32]byte
	Timestamp          *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterEvValidationExpired is a free log retrieval operation binding the contract event 0x22cd95a98f968866886bf2e9f6c8af31f17c78f37500bf0b0ca6725de29c7abb.
//
// Solidity: event EvValidationExpired(address userAddress, bytes32 fileMerkleRootHash, uint256 timestamp)
func (_StorageNodeContract *StorageNodeContractFilterer) FilterEvValidationExpired(opts *bind.FilterOpts) (*StorageNodeContractEvValidationExpiredIterator, error) {

	logs, sub, err := _StorageNodeContract.contract.FilterLogs(opts, "EvValidationExpired")
	if err != nil {
		return nil, err
	}
	return &StorageNodeContractEvValidationExpiredIterator{contract: _StorageNodeContract.contract, event: "EvValidationExpired", logs: logs, sub: sub}, nil
}

// WatchEvValidationExpired is a free log subscription operation binding the contract event 0x22cd95a98f968866886bf2e9f6c8af31f17c78f37500bf0b0ca6725de29c7abb.
//
// Solidity: event EvValidationExpired(address userAddress, bytes32 fileMerkleRootHash, uint256 timestamp)
func (_StorageNodeContract *StorageNodeContractFilterer) WatchEvValidationExpired(opts *bind.WatchOpts, sink chan<- *StorageNodeContractEvValidationExpired) (event.Subscription, error) {

	logs, sub, err := _StorageNodeContract.contract.WatchLogs(opts, "EvValidationExpired")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StorageNodeContractEvValidationExpired)
				if err := _StorageNodeContract.contract.UnpackLog(event, "EvValidationExpired", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEvValidationExpired is a log parse operation binding the contract event 0x22cd95a98f968866886bf2e9f6c8af31f17c78f37500bf0b0ca6725de29c7abb.
//
// Solidity: event EvValidationExpired(address userAddress, bytes32 fileMerkleRootHash, uint256 timestamp)
func (_StorageNodeContract *StorageNodeContractFilterer) ParseEvValidationExpired(log types.Log) (*StorageNodeContractEvValidationExpired, error) {
	event := new(StorageNodeContractEvValidationExpired)
	if err := _StorageNodeContract.contract.UnpackLog(event, "EvValidationExpired", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StorageNodeContractEvValidationSubmittedIterator is returned from FilterEvValidationSubmitted and is used to iterate over the raw logs and unpacked data for EvValidationSubmitted events raised by the StorageNodeContract contract.
type StorageNodeContractEvValidationSubmittedIterator struct {
	Event *StorageNodeContractEvValidationSubmitted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StorageNodeContractEvValidationSubmittedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StorageNodeContractEvValidationSubmitted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StorageNodeContractEvValidationSubmitted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StorageNodeContractEvValidationSubmittedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StorageNodeContractEvValidationSubmittedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StorageNodeContractEvValidationSubmitted represents a EvValidationSubmitted event raised by the StorageNodeContract contract.
type StorageNodeContractEvValidationSubmitted struct {
	UserAddress    common.Address
	FileMerkleRoot [32]byte
	SegmentIndex   uint32
	Timestamp      *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterEvValidationSubmitted is a free log retrieval operation binding the contract event 0x125690aeed72600ce0497b2ecc092d1b1b925f244d54906a195066af49c8b0b7.
//
// Solidity: event EvValidationSubmitted(address userAddress, bytes32 fileMerkleRoot, uint32 segmentIndex, uint256 timestamp)
func (_StorageNodeContract *StorageNodeContractFilterer) FilterEvValidationSubmitted(opts *bind.FilterOpts) (*StorageNodeContractEvValidationSubmittedIterator, error) {

	logs, sub, err := _StorageNodeContract.contract.FilterLogs(opts, "EvValidationSubmitted")
	if err != nil {
		return nil, err
	}
	return &StorageNodeContractEvValidationSubmittedIterator{contract: _StorageNodeContract.contract, event: "EvValidationSubmitted", logs: logs, sub: sub}, nil
}

// WatchEvValidationSubmitted is a free log subscription operation binding the contract event 0x125690aeed72600ce0497b2ecc092d1b1b925f244d54906a195066af49c8b0b7.
//
// Solidity: event EvValidationSubmitted(address userAddress, bytes32 fileMerkleRoot, uint32 segmentIndex, uint256 timestamp)
func (_StorageNodeContract *StorageNodeContractFilterer) WatchEvValidationSubmitted(opts *bind.WatchOpts, sink chan<- *StorageNodeContractEvValidationSubmitted) (event.Subscription, error) {

	logs, sub, err := _StorageNodeContract.contract.WatchLogs(opts, "EvValidationSubmitted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StorageNodeContractEvValidationSubmitted)
				if err := _StorageNodeContract.contract.UnpackLog(event, "EvValidationSubmitted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEvValidationSubmitted is a log parse operation binding the contract event 0x125690aeed72600ce0497b2ecc092d1b1b925f244d54906a195066af49c8b0b7.
//
// Solidity: event EvValidationSubmitted(address userAddress, bytes32 fileMerkleRoot, uint32 segmentIndex, uint256 timestamp)
func (_StorageNodeContract *StorageNodeContractFilterer) ParseEvValidationSubmitted(log types.Log) (*StorageNodeContractEvValidationSubmitted, error) {
	event := new(StorageNodeContractEvValidationSubmitted)
	if err := _StorageNodeContract.contract.UnpackLog(event, "EvValidationSubmitted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
